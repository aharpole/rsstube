---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<redacated>&maxResults=50&part=snippet&playlistId=UUy0tKL1T7wFoYcxCe0xjN6Q
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sun, 15 Mar 2020 05:44:04 GMT
      Date:
      - Sun, 15 Mar 2020 05:44:04 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"SJZWTG6xR0eGuCOh2bX6w3s4F94/XN7H3dAnGxqvuJlRyfJTSCeWHyg"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
 "kind": "youtube#playlistItemListResponse",
 "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/XN7H3dAnGxqvuJlRyfJTSCeWHyg\"",
 "nextPageToken": "CDIQAA",
 "pageInfo": {
  "totalResults": 105,
  "resultsPerPage": 50
 },
 "items": [
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/VozANyFuih3b0tKkFiV6mlKmWaE\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLk5tR2FYRW1mVElv",
   "snippet": {
    "publishedAt": "2020-03-08T15:28:39.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Computer-free Automation of a Jukebox (Electromechanics)",
    "description": "Ever wonder how we made all these crazy machines do all their crazy machine things before computers came along? Wonder no more as we explore the inner workings of a Wurlitzer 3400 series jukebox from 1970!\n\nThere are some links here for your enjoyment. Please enjoy these enjoyable links!\n\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nOliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Robin Johnsen, Nomad, Eric, Phia Westfall, Tom Rolfe, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Vaughn B., Breunie Ploeg, Benjamin Cirker, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, Kevin Hollywood, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Matthew Holder, Joshua Moncrieff, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Some Random, Jeremy Heiden, Garrick Kwan, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Will Hayworth, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Bendegúz Gellén, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, Marcus Langendorff, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, Conall Ó Maitiú, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hăvărneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Cupcake, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kenneth Siewers Møller, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, On Ice Perspectives, Brian Wright, TheGreatCO, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Casey Blackburn, Devon Hodgson, Paul Macejewski, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, Vernon, Ton Brands, Scott Wright, Kory Howard, rezonant, Thanasis Dimas, Marc Grondin, Hex, Daniel Barrera, Erkin Alp Güney, Mark Stradling, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/NmGaXEmfTIo/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/NmGaXEmfTIo/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/NmGaXEmfTIo/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/NmGaXEmfTIo/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/NmGaXEmfTIo/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 0,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "NmGaXEmfTIo"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/ZArGpcoYy0s0-vAmxo7aq6b1VTI\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlllUnU0eFlIX1cw",
   "snippet": {
    "publishedAt": "2020-02-22T17:20:51.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Teleprompters are clever, simple, and also pretty neat",
    "description": "You can support this channel on Patreon! Link below    \nYep. Teleprompters. That's what this video's about.\n\nYa want some links?\nFirstly, since everybody's gonna ask, this is the teleprompter I use;\nhttps://www.amazon.com/Glide-Gear-TMP100-Adjustable-Teleprompter/dp/B019AJOLEM\nOf note is that it's *quite* heavy so you will need a substantial tripod to use it. As far as your display? Again. Don't ask me that.\n\nAnd of course, the other links I usually put here:\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nShane Battye, Howard Jackson, Elizabeth Sullivan-Burton, Charlie Hart, Andrew Johnson, Robin Capper, Turaiel Rylis, Niklas Lehmacher, FL0M0, Lars Steenberg, Ryan Newson, Steve Russell, Eric Anderson, Sir Octopus, conduit of chivalrous cephalopods, Jurassic Jacob, Björn Petersen, Peter L, Jeff Groves, Johann Goergen, Jonathan Benjamin, Steve Toye, SeaburyNorton, Aging Wheels, Bevis King, DJ Hicks, Bill Danbury, Tony Toon, DA Blair, Daniel Westermann-Clark, Alex Rokholm (PapaQ), Matthew Niederberger, Adwardian, Tim Cox, KJ Skinner, Joe Sheets, Ouros, Eric Cardwell, C222, Stephen 'Fromnack' Johnson, Ken Klavonic, Jesus Hernandez, Fr. Darryl Millette, Michael Valant, Rasmus Larsen, Jack, Craig Albright, Bence Skorka, Stelly, TKB, ZirconiumX, qwertysampletext, Derek Ledbetter, Séamus, Tom Powell, geekiskhan, Adrien Sauvestre, Matthew Rahn, nikolaevarius, Nebelwerfer Granitara, Arhiman, Carleton, Benjamin Rippel, Andrew Johnson, andrew king, Duncan Fedde, Cole Kurkowski, Kenneth M Thomas, Zachary Nash, Yaniv, Francis Fisher, The War Academy, Conor Killeen, Jay, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Jeremy Kitchen, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Brian G. Shacklett, Chris Hartl, Andre Nogueira, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Howard Kraut, Mike Bailey, Matthias Dienelt, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, Chris LeChien, fussel, Corey A Hudson, Luc Ritchie, Eric Romero, Ryan Hardy, thefanification, Ewen McNeill, Henrik Ripa, Albin Flyckt, Shane Zamora, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Nick Pollard, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Benjamin A., Nathaniel, Michel Sievers, Colin, MrHammond, Aaron Rennow, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen Hinton, thegeoffreak, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Bob B, Mike Noe, Scott Rowland, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Owen O Byrne, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, William Evans, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/YeRu4xYH_W0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/YeRu4xYH_W0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/YeRu4xYH_W0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/YeRu4xYH_W0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/YeRu4xYH_W0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 1,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "YeRu4xYH_W0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/IEq9BJsD5irMxFrr_t98dR2YdqE\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLndoNGFXWlJ0VHdV",
   "snippet": {
    "publishedAt": "2020-02-13T21:40:13.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Brown; color is weird",
    "description": "You can support this channel on Patreon! Link below   \n\nThis video discusses the color brown. Seriously.\n\nThat Aging Wheels playlist:\nhttps://www.youtube.com/playlist?list=PLmBDJoIaNRGiK2BgCwz2ALDnNanKBSOgO\n\nAnd, of course, the Weird World in RGB for those of you who I couldn’t manage to summon a card for:\nhttps://www.youtube.com/watch?v=uYbdx4I7STg\n\nHow about some other, more different links?\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nJorge Caballero, Kyle Messner, Mainstream, Matthew Schwartz, gs, ashka, Mr. Yan, Matthias Feist, RedR0ze, adan c, Thomas Fuchs, Alan Holland, Philipp Doppelhofer, Dan Boulden, Simon Hookham, Phiroze Dalal, Benn Bocinski, Devin Rosenthal, Avalon Hamakei, Ray Hardman, G Cowell, Dan Coulson, Mike Berman, Kevin Hamilton, Jack Manning, Chase Tarson, Christopher D'Arpa, Marshall Kurtz, Hurf Durr, shaun morris, David Bell, Miguel Gonzalez, Ed Giardina, Bryce Ontiveros, Kenneth A Cusson, Johnathan Reale, Charles Corbin, Simon Arrow, Brett Walton, Martin Schröder, lakewalk3r, Hayden McAfee, Dan Maku, Mark Injerd, Paul Demers, Stephen P Wilshaw, Vladi Ivanov, Michael Sandler, Jacob Harrington, Gustav Toth, Pete Iacono, Perl the Raven, Clay, Jason Letchworth, Benjamin Deming, Thorbjörn Meyer, Eben, M1GEO, Alan Shieh, Christopher Whyte, Michael Kaegler, Chrno, Taylor Smith, Colin Macdonald, Shlomi Borovitz, Krispin Miller, Jan Borcherding, Matthew Castellana, Finn, Sean Anderson, David, Duncan Mulholland, Chaz Serir, Jason Downs, Joe Snaza, Lincoln Cole, Deviant Ollam, Dillan Weems, Eldrin_22, Mitch SuperKnot, Andrew Bogard, Cameron McCormick, Craig Guy, Brandon Ryan, Keith Hemenway, Travis Geiselbrecht, Andrew Eslick, Pedro Brito, Ryan Milke, AARGH!, Marko, splateagle, Ada Cohen, MaikSan, Timothy Miller, Jim Renney, Steve Lafferty, Joseph Mayfield, Noah Dobson, William Astle, Zufalligeule, Joe King, John Plasket, Don Eitner, Adam Belebczuk, Matt, Karol Koziol, Matt Lawrence, Matthew Krajnak, James Fuhrman, Erik Welander, Mark Majewicz, Logan Shelts, Ryan Dean, Arcanox, Matt Beard, Chad L, Sebastian Mellor, Will Palmer, Steets, Matt, Joel Jauregui, James Alexander, Joon Shin, Joseph Weiss, Ben Slater, Calvin Walton, Jesse Crawford, Justin Tokke, Ryan Morash, Matt Towers, digit777, Tee Jay, Delliardo, Eidorian, MsWhit, Jeremy Price, Lydia Saunders, Henry Fitzgerald, Nishith Thakkar, Samuel Colburn, Raphael Wichary, Pykrete_O.Sages, HailSaturn, Evan Langlais, Andyface, Hugo Melchers, ShirleyNeko, R Fisher, Brian Stilson, ColdRamen77, Cameron Lane, Sam Atkinson, PanicOpticon, Don Riesbeck, Craig Engbrecht, Marco Menendez, Nils Schneider, Rob Tapp, Sebastian Muñoz, Andrew Bedia, John Sanchez, Kenneth Dahle, Patrick Wolfensberger, datajerk, Jimmie Rodgers, Dukey, Biff McKeldin, Sam Farrelly, AFylH9X9ZZGKbxF, Martin Porcheron, Justin Baros, Stephen Turner, kara mccabe, Denzil Wilson, Thomas Daede, Jiri van Bergen, Craig Matthews, Travis Estell, David (chipgw), Patrick McCart, H.D. Gregg, Ariel Valenzuela, Cape, Julian Kaagman, Mauri Virtanen, PseudsPie, Mark Wingerd, Antonio Juarez, Tobi, Wesley Reynolds, Tyler King, Splendid Gecko, Anicast, Steven Salerno, Kevin Tangney, Nicolae Berbece, Andrew Sebastian, Daniel A.A. Pelsmaeker, Joar Wandborg, Walter Huf, Chester Plemany, Keith, Allen Singer, Chris Gardner, Skylar Strickland, Nick Daniels, Robert Loewen, Michael Dragone, Diego Egido, Malcolm Slater, Devin Wright, Mark Provan, Zarko Kuvalja, Ivar Hosteng, Kevin Ragsdale, Karsten Müller-Bier, Ron Painter, WALLE1Doctor1Who, Joe Turner, Shaun Faloon, Andrew Collings, Robin Monks, EndoliteMatrix, Ragnar Jensen, Neale Genereux, Alexander Swaim, Aaron Hile, Austin Nunn, WishMakers, Kevin Chevalier, Declan M Martin, Michael Butkiewicz, Andrew Crawley, Eric Laska, OG-Biebs, Nathaniel Thompson, Paul Giroux, Daniel Ziegler, Chris Hodapp, Wearwolf, Greg Morin, Scott Hutcheson, Ted Kern, Ellen Murray, Paul John Sandoval, Tony Cook, Ben Cook-Feltz, Jim Burgan, dim85, Sam Lentz, AkeBjorn, Lane Robert, MPc, Daniel Prows, Christopher Lucas, Marcin Żyła, Scott McCarthy, Michael Thomas, Zach Flauaus, Vincent Larson, Bryan Boettcher, paustin, Ian Baltutis, Lucy, Tytyty, MetricConversion, AwkwardHuggs, Lex Sketch, john lombard",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/wh4aWZRtTwU/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/wh4aWZRtTwU/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/wh4aWZRtTwU/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/wh4aWZRtTwU/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/wh4aWZRtTwU/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 2,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "wh4aWZRtTwU"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/RzJPTL58NtbHhhEiHXnQEZfrHNM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLkFTdW80RE02TVQw",
   "snippet": {
    "publishedAt": "2020-01-26T22:52:02.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Race to the finish; RCA's final gamble (CED Part 5)",
    "description": "You can support this channel on Patreon! Link below        \nThe end is near. The death knell approaches. What will become of RCA’s invention? And is this really the end? Would you like fries with that?\n\nHere’s Techmoan’s video on the VHD;\nhttps://www.youtube.com/watch?v=fCWLaAwr3sM\n\nAnd here’s a link to the playlist that this video is in, ya know, in case you to spend a feature length film’s worth of time learning about RCA’s folly;\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFVP0SGNlBiBtFVkV5LZ7SOU\n\nWould you like some other links? Great news! I have some!\n\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nMatt Allaire, Guy, Will Hayworth, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Bendegúz Gellén, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hăvărneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Cupcake, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kenneth Siewers Møller, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, Richard Sams, On Ice Perspectives, Brian Wright, TheGreatCO, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Kory Howard, rezonant, Thanasis Dimas, Marc Grondin, Hex, Daniel Barrera, Erkin Alp Güney, Mark Stradling, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Jason Watson, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Daniel Meagher, Joel, Z, Clemens, Bill Bates, Centronias, Dennis Walsh, Alex Warren, marc lulkin, Paul Robins, CanyonMID, Les, Keenan Finucan, Ian Clanton-Thuon, Ryan Pratt, Paul Newton, Greg Golds, Theo Keeler, Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Ryan Kamphuis, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, Józef Sokołowski, Will Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Jacob Ford, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Crisco762, Paul, Phil E, AnsulFolf, Zachary Kordenbrock, Roy Burns, Raymond Coutts, Ian Spence, Mike A, Alex Dodge, hipp1eguy, Justin Derleth, El Jefe, NEON725, Emily Eisenberg, Mark Christian, Dylan Leblanc, Bard, Megan Lovett, LGR, Jeffrey Frasure, kn0tsin, Michael Gooden, David Wulff, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, finacious, Isaac Clarke, Sean Hearrell, Christopher Macdonald, Selectric, Adam De Witt, Keithius, Sönke Schlüter, Julian Haldenby, Seb Bacanu, Mauricio, Hunter Thor, Austin C Borger, Gabe Cook, Anapan, S0N0S, Michael Patron, Sonic Ether, mike quick, Adam, Lucas, microserf, Daniel Kraut, André Gil da Costa, Paul Han, jacob topkok, Luka Sanzin, Peter Hillier, PeterH, William Holt, Grant Campau, Else, Michael Dunn, Rin, Richard Hicks, Matthew Foulks, Mike Roach, Simon Janssen",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ASuo4DM6MT0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ASuo4DM6MT0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ASuo4DM6MT0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ASuo4DM6MT0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ASuo4DM6MT0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 3,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ASuo4DM6MT0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/kZiYuj08tTttZULI5UBBzffsyk8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlJTVE5odkRHYllJ",
   "snippet": {
    "publishedAt": "2020-01-15T15:25:09.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Old-fashioned rice cookers are extremely clever",
    "description": "You can support this channel on Patreon! Link below    \nBet you didn't think a rice cooker was so interesting, did ya?\n\nLinks! Get your links! Hot, fresh, links!\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\nWanna see that rice cooker patent?\nhttps://patents.google.com/patent/US4315139A\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nYaniv, Francis Fisher, The War Academy, Conor Killeen, Jay, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Jeremy Kitchen, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Brian G. Shacklett, Chris Hartl, Andrew, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, Chris LeChien, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Henrik Ripa, Albin Flyckt, Shane Zamora, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, Jake Shep83, Nick Pollard, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Benjamin A., Nathaniel, Michel Sievers, Colin, MrHammond, Aaron Rennow, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen Hinton, thegeoffreak, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Bob B, Mike Noe, Scott Rowland, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Robin Johnsen, Nomad, Eric, Phia Westfall, Tom Rolfe, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Vaughn B., Breunie Ploeg, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, Kevin Hollywood, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Joshua Moncrieff, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Some Random, Jeremy Heiden, Garrick Kwan, Vince Batchelor, Peter Sarossy, Tracy Cogsdill",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/RSTNhvDGbYI/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/RSTNhvDGbYI/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/RSTNhvDGbYI/hqdefault.jpg",
      "width": 480,
      "height": 360
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 4,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "RSTNhvDGbYI"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/liFfeKlhnoJOXEUM2ELk-0c0Fmc\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlAxZERLdnVGSjBj",
   "snippet": {
    "publishedAt": "2020-01-03T10:01:12.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Holograms, Lasers & Boredom; the CED's march towards eventual invention",
    "description": "You can support this channel on Patreon! Link below  \nAlright, here it comes! The fourth part.\nClick here to get to the beginning of this playlist;\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFVP0SGNlBiBtFVkV5LZ7SOU\n\nSome fresh, assorted links!\n\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nChristopher Macdonald, Selectric, Adam De Witt, Keithius, Sönke Schlüter, Julian Haldenby, Seb Bacanu, Mauricio Lara, Hunter Thornsberry, Austin C Borger, Gabe Cook, Anapan, S0N0S, Michael Patron, Sonic Ether, mike quick, Adam, Lucas, microserf, Daniel Kraut, Patrick Williams, André Gil da Costa, Paul Han, jacob topkok, Luka Sanzin, Peter Hillier, PeterH, William Holt, Grant Campau, Else, Michael Dunn, Rin, Richard Hicks, Matthew Foulks, Mike Roach, Simon Janssen, Jorge Caballero, Kyle Messner, Mainstream, Matthew Schwartz, gs, ashka, Mr. Yan, Matthias Feist, RedR0ze, adan c, Thomas Fuchs, Alan Holland, Philipp Doppelhofer, Dan Boulden, Simon Hookham, Phiroze Dalal, Benn Bocinski, Devin Rosenthal, Avalon Hamakei, Ray Hardman, G Cowell, Dan Coulson, Mike Berman, Kevin Hamilton, Jack Manning, Chase Tarson, Christopher D'Arpa, Marshall Kurtz, Hurf Durr, shaun morris, David Bell, Miguel Gonzalez, Ed Giardina, Bryce Ontiveros, Kenneth A Cusson, Johnathan Reale, Charles Corbin, Simon Arrow, Brett Walton, Martin Schröder, lakewalk3r, Hayden McAfee, Dan Maku, Mark Injerd, Paul Demers, Stephen P Wilshaw, Daniel M. Hendricks, Vladi Ivanov, Michael Sandler, Jacob Harrington, Gustav Toth, Pete Iacono, Perl the Raven, Clay, Jason Letchworth, Benjamin Deming, Thorbjörn Meyer, Eben, M1GEO, Alan Shieh, Christopher Whyte, Chrno, Jason Bucata, Taylor Smith, Colin Macdonald, Shlomi Borovitz, Krispin Miller, Jan Borcherding, Matthew Castellana, Finn, Sean Anderson, David, Duncan Mulholland, Chaz Serir, Jason Downs, Joe Snaza, Lincoln Cole, Deviant Ollam, Dillan Weems, Eldrin_22, Mitch SuperKnot, Andrew Bogard, Cameron McCormick, Craig Guy, Brandon Ryan, Keith Hemenway, Travis Geiselbrecht, Andrew Eslick, Pedro Emílio Machado de Brito, Ryan Milke, AARGH!, Marko, splateagle, Ada Cohen, MaikSan, Timothy Miller, Jim Renney, Steve Lafferty, Joseph Mayfield, Noah Dobson, William Astle, Zufalligeule, John Plasket, Don Eitner, Adam Belebczuk, Nick Huwe, Matt, Karol Koziol, Seaghan Sefton, Matt Lawrence, Matthew Krajnak, James Fuhrman, Erik Welander, Mark Majewicz, Logan Shelts, Ryan Dean, Arcanox, Matt Beard, Chad L, Sebastian Mellor, Will Palmer, Steets, Matt, Joel Jauregui, James Alexander, Joon Shin, Joseph Weiss, Ben Slater, Calvin Walton, Jesse Crawford, Justin Tokke, Ryan Morash, Matt Towers, digit777, Tee Jay, Delliardo, Eidorian, MsWhit, Jeremy Price, Lydia Saunders, Henry Fitzgerald, Nishith Thakkar, Samuel Colburn, Raphael Wichary, Pykrete_O.Sages, Chris, Evan Langlais, Andyface, Hugo Melchers, ShirleyNeko, R Fisher, Brian Stilson, ColdRamen77, Cameron Lane, Sam Atkinson, Robert, PanicOpticon, Don Riesbeck, Craig Engbrecht, Marco Menendez, Nils Schneider, Rob Tapp, J.P. Wing, Sebastian Muñoz, Andrew Bedia, John Sanchez, Kenneth Dahle, Patrick Wolfensberger, datajerk, Jimmie Rodgers, Dukey, Biff McKeldin, Sam Farrelly, AFylH9X9ZZGKbxF, Martin Porcheron, Justin Baros, Stephen Turner, kara mccabe, Denzil Wilson, Thomas Daede, Jiri van Bergen, Craig Matthews, Travis Estell, David (chipgw), Patrick McCart, UnstableVoltage, H.D. Gregg, Ariel Valenzuela, Cape, Julian Kaagman, Mauri Virtanen, PseudsPie, Mark Wingerd, Antonio Juarez, Tobi, Wesley Reynolds, Tyler King, Splendid Gecko, Anicast, Steven Salerno, Kevin Tangney, Nicolae Berbece, Andrew Sebastian, Daniel A.A. Pelsmaeker, Joar Wandborg, Walter Huf, Chester Plemany, Keith, Allen Singer, Chris Gardner, Skylar Strickland, Nick Daniels, Robert Loewen, Michael Dragone, Diego Egido, Malcolm Slater, Devin Wright, Mark Provan, Zarko Kuvalja, Ivar Hosteng, Dustin Gray, Kevin Ragsdale, Karsten Müller-Bier",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/P1dDKvuFJ0c/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/P1dDKvuFJ0c/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/P1dDKvuFJ0c/hqdefault.jpg",
      "width": 480,
      "height": 360
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 5,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "P1dDKvuFJ0c"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/BRRuHsrqVgODOc9s6xQcDjckRxM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnJWcEFCQ3hpRGFV",
   "snippet": {
    "publishedAt": "2019-12-22T15:25:46.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Film: the reason some of the past was in HD",
    "description": "You can support this channel on Patreon! Link below  \n♫ last Christmas, I shot it on film ♫\n♫ but the very next year, I switched it to tape ♫\n♫ this year, to save me from tears ♫\n♫ I’ll just go and shoot in 4K ♫\n\nLinks!\n\nDid that card I pointed at not work? Luckily for you, I have a link right here!\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFUGEfwEl0uWduXGcRbT7Ran\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nJoshua Moncrieff, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Garrick Kwan, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Will Hayworth, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hăvărneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kenneth Siewers Møller, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, Richard Sams, On Ice Perspectives, Brian Wright, TheGreatCO, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Hex, Daniel Barrera, Erkin Alp Güney, Mark Stradling, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Jason Watson, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Daniel Meagher, Joel, Clemens, Bill Bates, Centronias, Dennis Walsh, Alex Warren, marc lulkin, Christopher Moyer, Paul Robins, CanyonMID, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Paul Newton, Greg Golds, Theo Keeler, Travis Hagen, Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Ryan Kamphuis, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, Józef Sokołowski, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Jacob Ford, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Crisco762, Paul, Phil E, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Alex Dodge, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, NEON725, Emily Eisenberg, Mark Christian, Dylan Leblanc, Samuel, Brad Rustvold, Megan Lovett, LGR, Jeffrey Frasure, kn0tsin, Michael Gooden, David Wulff, Dan Ryan, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, Zane Finley, Isaac Clarke, Sean Hearrell",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/rVpABCxiDaU/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/rVpABCxiDaU/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/rVpABCxiDaU/hqdefault.jpg",
      "width": 480,
      "height": 360
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 6,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "rVpABCxiDaU"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/3dGUwvcnFM7DEge-vTDkM8Xz1pY\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnM4a2hFTzdQdURV",
   "snippet": {
    "publishedAt": "2019-12-18T16:50:04.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "One more thing: the VHS notch",
    "description": "You can support this channel on Patreon! Link below  \r\nThis is not the same video you watched previously. I promise. It’s a whole new video.\n\nLinks!\r\n\nHere’s the earlier video on a strikingly similar topic:\nhttps://youtu.be/hWl9Wux7iVY\n\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\r\n\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\r\n\nAnd thank you to the following patrons!\nNicholas Savini, Sam Atkinson, Robert, PanicOpticon, Don Riesbeck, Craig Engbrecht, Marco Menendez, Nils Schneider, Rob Tapp, J.P. Wing, Sebastian Muñoz, Andrew Bedia, John Sanchez, Kenneth Dahle, Patrick Wolfensberger, datajerk, Jimmie Rodgers, Dukey, Biff McKeldin, Sam Farrelly, AFylH9X9ZZGKbxF, Justin Baros, Stephen Turner, kara mccabe, Denzil Wilson, Thomas Daede, Jiri van Bergen, Craig Matthews, Travis Estell, Yaniv, Francis Fisher, The War Academy, Conor Killeen, Jay, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Jeremy Kitchen, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Brian G. Shacklett, Chris Hartl, Andrew, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, Chris LeChien, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Henrik Ripa, Albin Flyckt, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Benjamin A., Nathaniel, Michel Sievers, Colin, MrHammond, Aaron Rennow, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen Hinton, thegeoffreak, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Bob B, Mike Noe, Scott Rowland, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Vaughn B., Breunie Ploeg, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, Kevin Hollywood, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/s8khEO7PuDU/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/s8khEO7PuDU/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/s8khEO7PuDU/hqdefault.jpg",
      "width": 480,
      "height": 360
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 7,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "s8khEO7PuDU"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/DspmG72Ncpn7efIEF2GLwyleR5Y\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmFkRDVvQzJhc1hJ",
   "snippet": {
    "publishedAt": "2019-11-27T16:07:58.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Klaxons; What makes them sound like that?",
    "description": "You can support this channel on Patreon! Link below  \nahOOOOOga! All aboard the HONK HONK express! We're gonna learn a few things about horns and then probably there will be bloopers or something.\n\nDid you know that there's an assortment of links just below this sentence?\n\nTechnology Connextras (the second channel that stuff goes on sometimes):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\nAnd thank you to the following patrons!\n\nMark Christian, Dylan Leblanc, Samuel, Brad Rustvold, Megan Turcotte, LGR, Jeffrey Frasure, kn0tsin, Michael Gooden, David Wulff, Dan Ryan, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, Zane Finley, Isaac Clarke, Sean Hearrell, Christopher Macdonald, Selectric, Adam De Witt, Keithius, Sönke Schlüter, Julian Haldenby, Seb Bacanu, Mauricio Lara, Hunter Thornsberry, Austin C Borger, Gabe Cook, Anapan, S0N0S, Michael Patron, Sonic Ether, mike quick, Adam, Lucas, microserf, Daniel Kraut, Patrick Williams, André Gil da Costa, Paul Han, jacob topkok, Luka Sanzin, Peter Hillier, PeterH, William Holt, Grant Campau, Else, Michael Dunn, Rin, Richard Hicks, Matthew Foulks, Mike Roach, Simon Janssen, Jorge Caballero, Kyle Messner, Mainstream, Matthew Schwartz, gs, ashka, Mr. Yan, Matthias Feist, RedR0ze, adan c, Thomas Fuchs, Alan Holland, Philipp Doppelhofer, Dan Boulden, Simon Hookham, Greg Ros, Phiroze Dalal, Benn Bocinski, Devin Rosenthal, Avalon Hamakei, Ray Hardman, G Cowell, Dan Coulson, Kat Aurelia, Mike Berman, Jack Manning, Chase Tarson, Christopher D'Arpa, Marshall Kurtz, Gabriel Cunha, Magus Dethen, Hurf Durr, shaun morris, David Bell, Miguel Gonzalez, Ed Giardina, Bryce Ontiveros, Kenneth A Cusson, Johnathan Reale, Charles Corbin, Simon Arrow, Brett Walton, Martin Schröder, lakewalk3r, Hayden McAfee, Dan Maku, Mark Injerd, Paul Demers, Stephen P Wilshaw, Daniel M. Hendricks, Vladi Ivanov, Michael Sandler, Jacob Harrington, Gustav Toth, Pete Iacono, Perl the Raven, Clay, Jason Letchworth, Benjamin Deming, Thorbjörn Meyer, Eben, M1GEO, Alan Shieh, Christopher Whyte, Chrno, Jason Bucata, Taylor Smith, Colin Macdonald, Shlomi Borovitz, Krispin Miller, Jan Borcherding, Matthew Castellana, Finn, Sean Anderson, David, Duncan Mulholland, Chaz Serir, Vegas, Jason Downs, Joe Snaza, Lincoln Cole, Deviant Ollam, Dillan Weems, Eldrin_22, Mitch SuperKnot, Andrew Bogard, Cameron McCormick, Craig Guy, Brandon Ryan, Keith Hemenway, Travis Geiselbrecht, Andrew Eslick, Ryan Milke, AARGH!, Marko, splateagle, Ada Cohen, MaikSan, Timothy Miller, Jim Renney, Steve Lafferty, Joseph Mayfield, Noah Dobson, William Astle, Zufalligeule, John Plasket, Don Eitner, Adam Belebczuk, Nick Huwe, Matt, Karol Koziol, Seaghan Sefton, Matt Lawrence, Matthew Krajnak, James Fuhrman, Erik Welander, Mark Majewicz, Logan Shelts, Ryan Dean, Arcanox, Matt Beard, Chad L, Sebastian Mellor, Will Palmer, Steets, Matt, Joel Jauregui, James Alexander, Joon Shin, Phil, Joseph Weiss, Ben Slater, Calvin Walton, Jesse Crawford, Justin Tokke, Ryan Morash, Matt Towers, digit777, Tee Jay, Delliardo, ChasingSol, Eidorian, MsWhit, Jeremy Price, Lydia Saunders, Henry Fitzgerald, Nishith Thakkar, Samuel Colburn, Raphael Wichary, Pykrete_O.Sages, Chris, Evan Langlais, Andyface, Hugo Melchers, ShirleyNeko, R Fisher, Brian Stilson, ColdRamen77, Cameron Lane",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/adD5oC2asXI/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/adD5oC2asXI/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/adD5oC2asXI/hqdefault.jpg",
      "width": 480,
      "height": 360
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 8,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "adD5oC2asXI"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/eLQ7k_yYEMlOsJruSD2O7s7pb3Q\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmVia0Q2RHpaRGxB",
   "snippet": {
    "publishedAt": "2019-11-17T14:15:51.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "LED color experiments 2019; Beyond the Sharpie",
    "description": "You can support this channel on Patreon! Link below\nYeah, so if you're new here, this is a thing that happens because I'm a curmudgeon about holiday lighting. Let's see what this year brings!\n\nHere's a link to Technology Connextras. You should definitely subscribe there. Duh.\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nAnd here are some other links, too!\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\nAnd thank you to the following patrons!\nAaron Helton, Michael Holmes, John Piontkowski, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Joshua Moncrieff, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, John Ehler, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hăvărneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Dan Davis, Erkin Alp Güney, Mark Stradling, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Jason Watson, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Daniel Meagher, Joel, Neil Forbes-Richardson, Clemens, Brian Kerber, Miranda Schwarck, Bill Bates, Centronias, Dennis Walsh, Alex Warren, marc lulkin, Christopher Moyer, Paul Robins, CanyonMID, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Paul Newton, Greg Golds, Theo Keeler, Travis Hagen, Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, Józef Sokołowski, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Jacob Ford, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Chris Burger, Paul, Phil E, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Alex Dodge, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, mrjoro, NEON725, Emily Eisenberg",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ebkD6DzZDlA/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ebkD6DzZDlA/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ebkD6DzZDlA/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ebkD6DzZDlA/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ebkD6DzZDlA/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 9,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ebkD6DzZDlA"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/tv_jxu_bqsostLW1-peajN451NQ\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmhXbDlXdXg3aVZZ",
   "snippet": {
    "publishedAt": "2019-11-08T16:56:04.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The VHS cassette was more clever than Beta",
    "description": "You can support this channel on Patreon! Link below  \n“Oh nooo! Betah!”\nIn this video, we discuss the endlessly discussed rivalry betwixt the Victorious VHS and the Bent-outa-shape Beta, but from an entirely new angle!\n\nSpeaking of angles, here’s a link to the videos on the Format War:\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFUrcyMYAkUPODENwP4gYCmf\n\nIn that playlist is also a video on Betamovie, but if you’re lookin’ fer just that thar video here’s a differn’ link!\nhttps://youtu.be/9uZ13I2zvfM\n\nAnd still! More links!\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\nAnd thank you to the following patrons!\nWilliam Astle, Zufalligeule, John Plasket, Don Eitner, Adam Belebczuk, Nick Huwe, Matt, Karol Koziol, Matthew Hirst, Matt Lawrence, Matthew Krajnak, James Fuhrman, Erik Welander, Mark Majewicz, Logan Shelts, Ryan Dean, Arcanox, Matt Beard, Yaniv, Francis Fisher, The War Academy, Conor Killeen, Jay, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Jeremy Kitchen, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Brian G. Shacklett, Chris Hartl, Andre N, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Denver Alexander, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Henrik Ripa, Albin Flyckt, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Benjamin A., Nathaniel, Michel Sievers, Colin Cogle, Aaron Rennow, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen B Hinton, thegeoffreak, scott b, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Bob B, Mike Noe, Scott Rowland, Joshua Doades, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Marcel de Jong, Vaughn B., Breunie Ploeg, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/hWl9Wux7iVY/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/hWl9Wux7iVY/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/hWl9Wux7iVY/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/hWl9Wux7iVY/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/hWl9Wux7iVY/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 10,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "hWl9Wux7iVY"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/u7C_sbl-V81ZXKM6VEqrdWC8Rs4\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmhwd0xEUVNhZEU0",
   "snippet": {
    "publishedAt": "2019-10-29T14:53:08.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "RCA's CED failed; their history can tell us why (Pt. 3)",
    "description": "You can support this channel on Patreon! Link below   \nPart three! It’s here! Huzzah! Let’s learn about what happened in the history of RCA that led up to the eventual failure of the CED.\n\nYou can find the previous two videos here:\nPart 1:\nhttps://youtu.be/PnpX8d8zRIA\nPart 2:\nhttps://youtu.be/mSFwyM2L5h4\n\nAnd hey! I’ve curated this delicious assortment of other links. Bon appetit!\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If you’d like to join the cool people who bring these totally rad videos to you (I’m hip and with it!), you can find out how at the link below. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nEmmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, John Ehler, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hăvărneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Vlycop, Alexandra Stanovska, Lucas Beckmann, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Dan Davis, Erkin Alp Güney, Mark Stradling, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Daniel Meagher, Joel, Neil Forbes-Richardson, Clemens, Brian Kerber, Miranda Schwarck, Bill Bates, Centronias, Dennis Walsh, Alex Warren, marc lulkin, Christopher Moyer, Paul Robins, CanyonMID, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Paul Newton, Greg Golds, Robbert van Rijsewijk, Theo Keeler, Travis Hagen, Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, Józef Sokołowski, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Chris Burger, Paul, Phil E, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Brandon Dean, Alex Dodge, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, mrjoro, NEON725, Emily Eisenberg, Mark Christian, Dylan Leblanc, Samuel, Brad Rustvold, Megan Turcotte, LGR, Jeffrey Frasure, kn0tsin, Michael Gooden, David Wulff, Dan Ryan, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, Zane Finley, Isaac Clarke, Sean Hearrell",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/hpwLDQSadE4/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/hpwLDQSadE4/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/hpwLDQSadE4/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/hpwLDQSadE4/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/hpwLDQSadE4/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 11,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "hpwLDQSadE4"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/ouBiWG_WSZSfMxYY9_4KBMsGw1U\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLml5YUdETEJzbWRZ",
   "snippet": {
    "publishedAt": "2019-10-18T12:56:39.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The VFD that isn't",
    "description": "You can support this channel on Patreon! Link below   \nWouldn’t it be nice if VFDs made a resurgence? Just put VFDs on everything, already! Make VFDs the new “blockchain” or “neural networks” or whatever. Priorities, people!\n\nFor those of you who enjoy links, I have great news! I found some!\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nYaniv, Francis Fisher, The War Academy, Conor Killeen, Jay, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Jeremy Kitchen, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Brian G. Shacklett, Chris Hartl, Andre N, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Denver Alexander, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Henrik Ripa, Albin Flyckt, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Benjamin A., Nathaniel, Michel Sievers, Colin Cogle, Aaron Rennow, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen B Hinton, thegeoffreak, scott b, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Bob B, Mike Noe, Scott Rowland, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Marcel de Jong, Vaughn B., Breunie Ploeg, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, John Piontkowski, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/iyaGDLBsmdY/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/iyaGDLBsmdY/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/iyaGDLBsmdY/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/iyaGDLBsmdY/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/iyaGDLBsmdY/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 12,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "iyaGDLBsmdY"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/NcIp04Fap539iKOKf3TKV57JtRQ\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnotcThlaHpIZVFR",
   "snippet": {
    "publishedAt": "2019-09-30T14:32:08.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "LCCS: The LCD / CRT Hybrid from JVC",
    "description": "You can support this channel on Patreon! Link below   \nSo. Ya want color, eh? But you don’t want any of them dots or stripes? We can do that.\n\nSome links!\nHere are the earlier videos I referenced:\nThis one explains how analog television works:\nhttps://youtu.be/dX649lnKAU0\nAnd this one is all about Compatible Color:\nhttps://youtu.be/InrDRGTPqnE\n\nFor those of you who enjoy links, have some more!\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nJustin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, qzb, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Chris Burger, Paul, Phil E, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Brandon Dean, Alex Dodge, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, mrjoro, NEON725, Emily Eisenberg, Mark Christian, Dylan Leblanc, Samuel, Brad Rustvold, Megan Turcotte, LGR, Jeffrey Frasure, kn0tsin, Pedro Soto, Michael Gooden, David Wulff, Dan Ryan, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, Zane Finley, Isaac Clarke, Sean Hearrell, Christopher Macdonald, Selectric, Adam De Witt, Keithius, Sönke Schlüter, Julian Haldenby, Seb Bacanu, Mauricio Lara, Hunter Thornsberry, Austin C Borger, Gabe Cook, Anapan, S0N0S, Michael Patron, Sonic Ether, mike quick, Adam, Lucas, microserf, Daniel Kraut, Patrick Williams, André Gil da Costa, Paul Han, jacob topkok, Luka Sanzin, Peter Hillier, PeterH, Gus, William Holt, Grant Campau, Else, Michael Dunn, Rin, Richard Hicks, Matthew Foulks, Mike Roach, Simon Janssen, Jorge Caballero, Kyle Messner, Mainstream, Matthew Schwartz, gs, ashka, Mr. Yan, Matthias Feist, RedR0ze, adan c, Thomas Fuchs, Ralph, Alan Holland, Philipp Doppelhofer, Dan Boulden, Simon Hookham, Greg Ros, Phiroze Dalal, Benn Bocinski, Devin Rosenthal, Steven Ray Lane, Avalon Hamakei, Ray Hardman, G Cowell, Dan Coulson, Kat Aurelia, Mike Berman, Chase Tarson, Gabriel Cunha, Magus Dethen, Phil, Hurf Durr, shaun morris, David Bell, Miguel Gonzalez, Ed Giardina, Bryce Ontiveros, Kenneth A Cusson, Johnathan Reale, Jevon Vermeulen, Charles Corbin, Simon Arrow, Brett Walton, Martin Schröder, lakewalk3r, Hayden McAfee, Dan Maku, Zachary Dickerson, Mark Injerd, Paul Demers, Stephen P Wilshaw, Daniel M. Hendricks, Vladi Ivanov, Michael Sandler, Jacob Harrington, James Hamilton, Pete Iacono, Kib Bibens-LeFebvre, Perl the Raven, Clay, Jason Letchworth, Benjamin Deming, Thorbjörn Meyer, Eben, M1GEO, Alan Shieh, Christopher Whyte, Chrno, Jason Bucata, Taylor Smith, Colin Macdonald, Shlomi Borovitz, Krispin Miller, Jan Borcherding, ec2-user, Matthew Castellana",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/z-q8ehzHeQQ/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/z-q8ehzHeQQ/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/z-q8ehzHeQQ/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/z-q8ehzHeQQ/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/z-q8ehzHeQQ/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 13,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "z-q8ehzHeQQ"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/fvzVzO_pUUeZd-nvBRX8HcnERys\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLm1TRnd5TTJMNWg0",
   "snippet": {
    "publishedAt": "2019-09-21T12:18:09.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The CED: No really, it coulda made sense! (Part 2)",
    "description": "You can support this channel on Patreon! Link below    \nIt’s seriously not that crazy of an idea. RCA might have pulled this off in a couple of ways, and in this video we explore those new angles.\n\nFirst of all, here’s part one;\nhttps://youtu.be/PnpX8d8zRIA\n\nHere are a few videos that show what goes on inside the later players:\nhttps://www.youtube.com/watch?v=SvKF0d9MAiM\nhttps://www.youtube.com/watch?v=XoTc9l7ObHY\nThe first link is a quick view, the second link includes more explanation of the player itself.\n\nAnd where there are some links, you’ll find more links!\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nLee Tustain, Ramon Gamez, Marcel de Jong, Vaughn B., Breunie Ploeg, Braden McDorman, Stephen Bank, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, John Piontkowski, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Mat Stu, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Benjamin Gott, Luke, Zach Le, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, John Ehler, William Matthews, Fred Leckie, Julian Zielke, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Zack, Robert L LaBelle, Chris Satterfield (Compgeke), Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, Damian, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Rainbow Warrior, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Andrew Bobulsky, Matthew R, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Ethan R, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Case Tu'ikolovatu, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Jason Ashcroft, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Erkin Alp Güney, Mark Stradling, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Seph P, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, Allan Parker, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Daniel Meagher, Joel, Neil Forbes-Richardson, Clemens, Brian Kerber, Miranda Schwarck, Bill Bates, Centronias, Dennis Walsh, Nuno Silva, Alex Warren, marc lulkin, Christopher Moyer, Christian Schulz, Paul Robins, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Gregory Knott, Paul Newton, Greg Golds, Robbert van Rijsewijk, Theo Keeler, Travis Hagen, Albizu Garcia , Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/mSFwyM2L5h4/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/mSFwyM2L5h4/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/mSFwyM2L5h4/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/mSFwyM2L5h4/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/mSFwyM2L5h4/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 14,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "mSFwyM2L5h4"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/fhIHwIhY6W20SmMFIrOCGHWIGYs\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlBucFg4ZDh6UklB",
   "snippet": {
    "publishedAt": "2019-09-10T17:04:28.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The CED: RCA's Very Late, Very Weird Video Gamble (Pt. 1)",
    "description": "You can support this channel on Patreon! Link below  \nBring the magic home… with RCA!  Please? We really want you to buy this. Please. Buy it now. Right now. It’ll be great.\n\nHey! Part 2 is now up and running! Here's a link;\nhttps://youtu.be/mSFwyM2L5h4\n\nIf you’d like to learn more about the CED system, you should check out this link:\nhttp://www.cedmagic.com/home/\nTom Howe’s created a wonderful resource here. It’s a little old, but there are lots of goodies.\n\nHow about some other, more different links?\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd of course, thank you to the following patrons!\nYaniv, Francis Fisher, The War Academy, Conor Killeen, Jason R Scheuren, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Harald E. Westlie, Carl Yazbek, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Colton Aubrey Hooke, Brian G. Shacklett, Eduardo Kaftanski, Chris Hartl, Andre N, Tony, Matthew Baron, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, Peek, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Denver Alexander, Jan Stavel, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Raymond LaRose, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Thomas Beaver, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, Tully, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Albin Flyckt, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Eric Butterfield, Benjamin A., Nathaniel, Michel Sievers, Colin Cogle, Aaron Rennow, Yota Ninja, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen B Hinton, thegeoffreak, scott b, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Tero Janhunen, Bob B, Mike Noe, Scott Rowland, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma,Simon Hookham, Greg Ros, Phiroze Dalal, Benn Bocinski, Devin Rosenthal, Steven Ray Lane, Avalon Hamakei, Ray Hardman, G Cowell, Dan Coulson, Kat Aurelia, Mike Berman, Chase Tarson, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, Philip, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Gideon Ritter, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Zachary Hazlett, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/PnpX8d8zRIA/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/PnpX8d8zRIA/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/PnpX8d8zRIA/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/PnpX8d8zRIA/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/PnpX8d8zRIA/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 15,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "PnpX8d8zRIA"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/IbLqLUo9ereO2jGiLLCbMUPZHUM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnVZYmR4NEk3U1Rn",
   "snippet": {
    "publishedAt": "2019-08-28T17:25:17.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Weird World in RGB",
    "description": "You can support this channel on Patreon! Link below   \nHave you ever wondered why the word looks so weird? Wait. Weird as in, like, all the time? Of course! We live in a weird world! But light, though! What about weird light? Ahhh, that's what this video is all about.\nThis is the strangest vid. description I've written in a while. Cool.\n\nAlright, so now here's the part where some links go:\n\nThe all-important second channel discussion;\nhttps://youtu.be/gN5TSzRUxKk\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd of course, thank you to the following patrons!\nPaul Robins, David Riediger, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Gregory Knott, Paul Newton, Greg Golds, Robbert van Rijsewijk, Theo Keeler, Travis Hagen, Albizu Garcia , Tyler Alberico, Benjamin Ratner, Doug Davenport, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, qzb, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Stephen Amar, Bryce, Andy Holzhammer, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Chris Burger, Paul, Phil E, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Brandon Dean, Alex Dodge, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, mrjoro, NEON725, Bree Asher, Emily Eisenberg, Mark Christian, Dylan Leblanc, Samuel, Brad Rustvold, Megan Turcotte, LGR, Jeffrey Frasure, kn0tsin, Pedro Soto, Michael Gooden, David Wulff, Dan Ryan, Max, Fredrik Lindroth, Michael Riegel, Paul Kavanagh, Tarocco, AFIFI, Zane Finley, Isaac Clarke, Sean Hearrell, Christopher Macdonald, Selectric, Hamrat, Adam De Witt, Keithius, Sönke Schlüter, Julian Haldenby, Seb Bacanu, Mauricio Lara, Hunter Thornsberry, Austin C Borger, Gabe Cook, Anapan, S0N0S, Sonic Ether, mike quick, Adam, Lucas, microserf, Daniel Kraut, Patrick Williams, André Gil da Costa, Paul Han, jacob topkok, Luka Sanzin, Peter Hillier, PeterH, Gus, William Holt, Grant Campau, Else, Michael Dunn, Rin, Cameron Workman, Richard Hicks, Matthew Foulks, Mike Roach, Simon Janssen, Jorge Caballero, Claude Dion, Kyle Messner, Mainstream, Matthew Schwartz, gs, ashka, Mr. Yan, Matthias Feist, RedR0ze, adan c, Thomas Fuchs, Ralph, Alan Holland, Philipp Doppelhofer, Dan Boulden",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/uYbdx4I7STg/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/uYbdx4I7STg/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/uYbdx4I7STg/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/uYbdx4I7STg/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/uYbdx4I7STg/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 16,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "uYbdx4I7STg"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/CzA_O3FAgFpIp1QsVI5HLCVGUmU\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmpyTWlxRWtTazQ4",
   "snippet": {
    "publishedAt": "2019-08-11T23:34:00.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Switches are Clicky; Here's Why",
    "description": "You can support this channel on Patreon! Link below    \nClick clack I was taken aback. Wonderin’ ‘bout those switches of light, yeah.\nLet’s find out what the point is of all that clacking, shall we?\n\nHey! Here are some fun links!\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel stay as weird as it is (and maybe, just maybe, get even weirder!), please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nViorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Zachary Hazlett, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Dave Howlett, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Marcel de Jong, Vaughn B., Breunie Ploeg, Braden McDorman, Stephen Bank, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, PJ Gunasekera, Adisibio, Aaron Helton, Michael Holmes, John Piontkowski, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Mat Stu, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Jack Nichol, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Dave Redmond, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Benjamin Gott, Luke, Zach Le, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, John Ehler, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Zack, Robert L LaBelle, Chris Satterfield (Compgeke), Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, Damian, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Ian Pirner, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kyle Creasey, Rainbow Warrior, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Andrew Bobulsky, Matthew R, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Ethan R, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Case Tu'ikolovatu, Zimpan, Loïc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Jason Ashcroft, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Mark Stradling, Gareth Lucas, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, Jacob B, McLargehuge 510, Andrew, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Seph P, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Christopher Lowell, Oleg, Michael Sacchi, PC Perspective, Allan Parker, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Maxime Aubaret, Markus Towara, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Emmanuel Jaramillo, Daniel Meagher, Joel, Neil Richardson, Clemens, Brian Kerber, Miranda Schwarck, Bill Bates, Centronias, Dennis Walsh, Nuno Silva, Alex Warren, marc lulkin, Christopher Moyer, Christian Schulz",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/jrMiqEkSk48/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/jrMiqEkSk48/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/jrMiqEkSk48/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/jrMiqEkSk48/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/jrMiqEkSk48/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 17,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "jrMiqEkSk48"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/5hY-CqWt5VN7uxkS0HRfItSSFQw\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLkN3WmR1cjFQaTNN",
   "snippet": {
    "publishedAt": "2019-07-29T19:02:26.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Fiber vs. Copper; What do we really need?",
    "description": "You can support this channel on Patreon! Link below   \nFiber optics. A DeLIGHTful technology. Ooh that’s a groaner. Well, why don’t we see them around more often? Let’s find out!\n\nHere’s a fresh assortment of links for ya:\n\nFirst, the previous video:\nhttps://youtu.be/ICcEOXVZ3F0\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nYaniv, Francis Fisher, The War Academy, Conor Killeen, Jason R Scheuren, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Harald E. Westlie, Carl Yazbek, Stephen Bell, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, h.drew foy, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Colton Aubrey Hooke, Brian G. Shacklett, Eduardo Kaftanski, Chris Hartl, Gantradies, Andre N, Tony, Matthew Baron, Revenge, Mark Critchley, Andres Plaza, Charlie Hankin, Craig Leverenz, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, PK, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Thijs Dortmann, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Denver Alexander, Jan Stavel, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Raymond LaRose, Howard Kraut, Mike Bailey, Michael Bernstein, Kevin Strehl, Yona, neko, Grayson Lang, Thomas Beaver, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, mark barratt, Tully, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Eric Romero, Ryan Hardy, Taylor Martin, thefanification, Ewen McNeill, Albin Flyckt, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam Witney, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, Alec Jahn, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, The Paul Allen, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Eric Butterfield, Benjamin A., Nathaniel, Colin Cogle, Aaron Rennow, Yota Ninja, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen B Hinton, thegeoffreak, Karen Scarfone, scott b, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Tero Janhunen, Bob B, Mike Noe, Scott Rowland, Phillip Cosgrove, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Alessandro Robert Nilsen, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, Philip, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Oliver Lee, Lennart Sorensen, Mitch Radoll, Sarah O'Leary & Cara Warbrick",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/CwZdur1Pi3M/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/CwZdur1Pi3M/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/CwZdur1Pi3M/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/CwZdur1Pi3M/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/CwZdur1Pi3M/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 18,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "CwZdur1Pi3M"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/0BLnJTODS7YjJTwZjuZttGzDi4s\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLklDY0VPWFZaM0Yw",
   "snippet": {
    "publishedAt": "2019-07-19T23:25:33.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "TOSLINK: That one consumer fiber optic standard",
    "description": "You can support this channel on Patreon! Link below   \nWell. Isn’t that strange. Digital data through fiber optics, and in the home no less! Let’s explore this a little, shall we?\n\nThese may not be TOSLINKs but they sure are links!\n\nHere's that Digital Sound playlist:\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFWBEyCKt4tKHIk8ez_pZS_P\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nCase Tu'ikolovatu, Zimpan, Loïc Esch, Filmmaker IQ, Greg H, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Jason Ashcroft, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Mark Stradling, Gareth Lucas, Anton Mironov, Peter Sodke, joseph, Kristian Scheibe, Jacob B, McLargehuge 510, Andrew, Nick, Greg Tan, The Masterpiece, Seanvdv, Chris Cody, Chad Fertig, M Shrimptoast, Joseph Houghtaling, Ben Tucci, Seph P, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Nathan Back, Christopher Lowell, Oleg, Michael Sacchi, PC Perspective, Allan Parker, Ali Elam, Dan Allen, Trent Crawford, Zhenbang Xiao, Maxime Aubaret, Markus Towara, Zackary E. Jenkins, Barky doggo, Ectra, Dylan Taylor, Reid Fishler, Emmanuel Jaramillo, Daniel Meagher, Joel, Neil Richardson, Clemens, Brian Kerber, Miranda Schwarck, Bill Bates, Centronias, Dennis Walsh, Nuno Silva, Alex Warren, marc lulkin, Christopher Moyer, Christian Schulz, Paul Robins, David Riediger, Les, Keenan Finucan, funcrusher, Ian Clanton-Thuon, Ryan Pratt, Don Nguyen, Gregory Knott, Paul Newton, Greg Golds, Robbert van Rijsewijk, David Jeffares, Theo Keeler, Travis Hagen, Alex Scheidly, Albizu Garcia , Tyler Alberico, Benjamin Ratner, Doug Davenport, John Virts, Paul Sharp, Craig Brickey, Zidy, Justin Trout, Brandon, John Galus, Karl Kornel, Danila Fediashchin, KD, Sound Board, Adam, Zach Rose, Arvin Prasetya Wiranata, Patryk Majewski, Chris & Brigette Rodriguez, Mattis Målbakken, Dirk Lembens, WB, AmbientCyan, Sam Calandra, Wolfgang Gschwendtner, qzb, William Preston, Dave Treadwell, Stuart Stanfield, Howard Longden, Christopher Olson, Kor Nielsen, Adrian Hunziker, Kori Fulgham, Stephen Amar, Bryce, Andy Holzhammer, Patrick van der Rijt, Ethan Mears, Eli Rueda, Jon Clegg, David Jeroslow, Ian Hills, Charles MacDonald, Andrew, Tim Jones, Chris Burger, Paul, AnsulFolf, c sporn, Zachary Kordenbrock, Roy Burns, Ian Spence, Mike A, Brandon Dean, Alex Dodge, Sten, hipp1eguy, Blake Kwasnicki, Mick Carroll, Justin Derleth, El Jefe, mrjoro, NEON725, Bree Asher, Emily Eisenberg, Hunter Scales, Mark Christian, Dylan Leblanc, Samuel, Brad Rustvold",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ICcEOXVZ3F0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ICcEOXVZ3F0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ICcEOXVZ3F0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ICcEOXVZ3F0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ICcEOXVZ3F0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 19,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ICcEOXVZ3F0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/UreEDJMzJH76HyPHHA-UDjubuXQ\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlpDNVpyM05DMlBZ",
   "snippet": {
    "publishedAt": "2019-07-06T13:56:50.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Best Easy Way to Capture Analog Video (it's a little weird)",
    "description": "You can support this channel on Patreon! Link below. \nAfter much annoyance dealing with fiddly capturing methods, I thought I’d show you the method I stumbled upon that works amazingly well, is fairly cheap, and awfully easy. I’ve been thrilled with it, and I think you’ll be too.\n\nThis here is the composite to HDMI “upscaler” I got. Note that in the product description, it say’s it can’t improve image quality, even though upscaler in the title. Go figure.\nhttps://www.amazon.com/CSRET-Composite-Converter-Upscaler-Supporting/dp/B0152E8UEG/ref=sr_1_24?keywords=composite+video+upscaler&qid=1562292896&s=gateway&sr=8-24\n\nAnd here’s the capture doodad:\nhttps://www.amazon.com/1080P-Video-Capture-Recorder-Compatible/dp/B07JW5BBYG/ref=sr_1_12_sspa?keywords=hdmi+capture+box&qid=1562293162&s=gateway&sr=8-12-spons&psc=1\n\nThese links worked as of 7/4/19. In the future, you may need to search for similar alternatives.\n\nHow about some other links?\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\n\nTrey Harris, Peter Pfundstein, Wilhelm Screamer, Mat Stu, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Jack Nichol, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, MrSonicOSG, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Steve Trambert, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Dave Redmond, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Jeremy Heiden, Vince Batchelor, Peter Sarossy, Favian, Tracy Cogsdill, Matt Allaire, Guy, Benjamin Gott, Luke, Zach Le, Fredrik Østrem, Anil Dash, Simon Safar, Michael Wileczka, John Ehler, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Kenneth Morenz, Andy, Adam Merolli, Greg Stearns, Zack, Robert L LaBelle, Chris Satterfield (Compgeke), Brian Johnson, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, Damian, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Ian Pirner, Mark Stone, Arthur Zalevsky, John Fruetel, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kyle Creasey, Rainbow Warrior, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Andrew Bobulsky, Matthew R, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Ethan R, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ZC5Zr3NC2PY/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ZC5Zr3NC2PY/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ZC5Zr3NC2PY/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ZC5Zr3NC2PY/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ZC5Zr3NC2PY/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 20,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ZC5Zr3NC2PY"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/TBAi4Rfo8vdIayF_VoFn-RGWGCo\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLl8tbUJlWUMyS0dj",
   "snippet": {
    "publishedAt": "2019-06-15T14:06:14.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Portable Air Conditioners - Why you shouldn't like them",
    "description": "You can support this channel on Patreon! Link below    \nOh no. It’s a new version of a well-established product that trades efficiency for convenience. But this time, it’s more than just being cool. It’s about cooling.\n\nSeriously, either we need to get more awareness of how dumb single-hose portable A/C units are, or we need to just use window units whenever possible. While I know that there are times a portable unit is the only option (remember, I’m in that boat), it seems that only very high capacity, premium machines have the facility to use two hoses. Which is frankly stupid but then again that’s what I’m trying to tell you now.\n\nHow about some links? Ya link links? I’ve gathered some for you:\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\n\nYaniv, Tab Patterson, Francis Fisher, The War Academy, Conor Killeen, Jason R Scheuren, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Harald E. Westlie, Carl Yazbek, Stephen Bell, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Kotanu, Christopher Luna, Paul Mills, Colton Aubrey Hooke, Brian G. Shacklett, Eduardo Kaftanski, Steve Stone, Chris Hartl, Gantradies, Andre N, Tony, Matthew Baron, Revenge, Andres Plaza, Charlie Hankin, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, PK, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Christopher Dickey, Denver Alexander, Jan Stavel, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Raymond LaRose, Howard Kraut, Mike Bailey, Yona, neko, Grayson Lang, Thomas Beaver, Jeffery Grajkowski, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Redfern, mark barratt, Tully, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Eric Romero, Ryan Hardy, Taylor Martin, Nicholas, thefanification, Ewen McNeill, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Vince Terranova, Andrew Montagne, Alec Jahn, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, toasterking, Jason Brady, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Eric Butterfield, Tim Skloss, Benjamin A., Nathaniel, Colin Cogle, Aaron Rennow, Yota Ninja, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Laria, Stephen B Hinton, thegeoffreak, Karen Scarfone, f. scott b., Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Tero Janhunen, Bob B, Mike Noe, Scott Rowland, Phillip Cosgrove, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Matt Mullett, Andreas Kuzma, Paul Moffat, Max, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, Philip, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Mats Svardal, Jeremey Hastings, Mark Wayt",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/_-mBeYC2KGc/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/_-mBeYC2KGc/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/_-mBeYC2KGc/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/_-mBeYC2KGc/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/_-mBeYC2KGc/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 21,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "_-mBeYC2KGc"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/MAR-ph-Jq8LD63pWzLHU9d_CIj8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLkd1b0ZXMnlBRDdn",
   "snippet": {
    "publishedAt": "2019-06-02T13:24:50.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Automatic Record Changers: We used to like them",
    "description": "You can support this channel on Patreon! Link below    \nHmm. What were these things? Why were some record sets made to work with them? When did we decide we hated them? Was that the right call? Will I ask another question?\nThese are the things you’ll learn in this video, where we explore the humble record changer. Seriously. They didn’t suck!\n\nIf you’d like a more complete look at the Victor VE 10-50, you should take a look at these videos. Note that in the last link, the model shown is the premium 10-70 which included an electronic amplifier! Ooohh! The other two were Orthophonic Victrolas, which used an acoustic reproducer and a folded horn to achieve their surprisingly good fidelity.\nhttps://www.youtube.com/watch?v=QclRCJ4nwTU\nhttps://www.youtube.com/watch?v=MciuIUW0DGg\nhttps://www.youtube.com/watch?v=QHuX24TUZ80\n\nAlso, this site gives great info about Victrolas, and you should check them out!\nhttp://www.victor-victrola.com/10-50.htm\n\n\n\nHow about some more links? I’ve got plenty!\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\n\nAnd thank you to the following patrons!\nTrey Harris, Peter Pfundstein, Wilhelm Screamer, Mat Stu, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Jack Nichol, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, MrSonicOSG, Sinirlan, rusty shakelford, Mitch Schenk, Juan Olivares, Andrei Alexandru Bleortu, Mike Bird, Emmett Ray, Michael Shaffer, Steve Trambert, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Peter Sarossy, Leigh Beattie, Tracy Cogsdill, Matt Allaire, Dave Mausner, Guy, John Hickey, Benjamin Gott, Luke, Rayne Luna, Zach Le, Fredrik Østrem, Greg Hodgdon, Anil Dash, Michael Wileczka, Chris Wolf, John Ehler, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Kenneth Morenz, Andy, Greg Stearns, Zack, Robert L LaBelle, Chris Satterfield (Compgeke), Brian Johnson, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, HenryD, Damian, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Ian Pirner, Mark Stone, Arthur Zalevsky, John Fruetel, Jonathan Mayfield, Adam Veneziano, Christopher Swenson, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, a ray, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Sebastian Stenner, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kyle Creasey, Rainbow Warrior, jacob kamphaus, Alex Hurley, Andrew Bobulsky, Matthew R, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Marcus, Ethan R, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Tom Ebenhoe, Casey Blackburn, Matthew Jensen, Devon Hodgson, Paul Macejewski, Case Tu'ikolovatu, Zimpan, Loïc Esch, Filmmaker IQ, Greg H, Lin Le, Ryan Blair, Jan Houben, Bren Ehnebuske, T.J. Zientek, AdamPlays, Vernon, Ton Brands, Scott Wright, Jason Ashcroft, Kory Howard, William Lahti, Thanasis Dimas, Marc Grondin, Lisa, Hex, Mark Stradling, Gareth Lucas, Anton Mironov, Robert West, Peter Sodke, joseph, Kristian Scheibe, Jacob, McLargehuge 510, Andrew, Nick, Ruxnor, Greg Tan, The Masterpiece, Sean, Chris Cody, Chad Fertig, Daniel Delaney, Greg Lindsey, Joseph Houghtaling, Ben Tucci, Seph P, Dave Stares, Josh Braun, Lachy Bell, Joe Johnson, Daniel Dugger, Nathan Back, Christopher Lowell, Oleg, PC Perspective, Howard Longden",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/GuoFW2yAD7g/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/GuoFW2yAD7g/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/GuoFW2yAD7g/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/GuoFW2yAD7g/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/GuoFW2yAD7g/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 22,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "GuoFW2yAD7g"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/xVY92IeyvFh9DtLOJ2cw1eQE2YY\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlpaQzBTUDAyUHFZ",
   "snippet": {
    "publishedAt": "2019-05-10T10:51:54.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Thermostats: Cooler than you think!",
    "description": "You can support this channel on Patreon! Link below   \nBoy do I have a COOL topic for you today. We’re gonna turn up the HEAT with this one!\n\nWould you like some links? Have some!\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\n\nYaniv, Tab Patterson, Francis Fisher, The War Academy, Conor Killeen, Paul Emmerich, Jason R Scheuren, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Harald E. Westlie, Carl Yazbek, Stephen Bell, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, SovietBear, Mike Mason, Techmoan, Brendan Terrett, Kotanu, Christopher Luna, Paul Mills, Colton Aubrey Hooke, Brian G. Shacklett, Eduardo Kaftanski, Steve Stone, Chris Hartl, Gantradies, Andre N, Tony, Matthew Baron, Revenge, Andres Plaza, Charlie Hankin, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, PK, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Tim Juchcinski, Christopher Dickey, Denver Alexander, Jan Stavel, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Raymond LaRose, Howard Kraut, Mike Bailey, Yona, neko, Grayson Lang, Thomas Beaver, Jeffery Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Douglas, Sam Redfern, mark barratt, Tully, EvilPicard, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Eric Romero, Ryan Hardy, Taylor Martin, Nicholas, Ewen McNeill, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Torin Zaugg, Vince Terranova, Andrew Montagne, Alec Jahn, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, toasterking, Jason Brady, Norman Tatlock, ce keen, Jake Shep83, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Eric Butterfield, Tim Skloss, Benjamin A., Nathaniel, Colin Cogle, Aaron Rennow, Yota Ninja, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Charles Surett, Laria, Stephen B Hinton, thegeoffreak, Karen Scarfone, f. scott b., Piotr Kowalski, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Tero Janhunen, Bob B, Mike Noe, Scott Rowland, Phillip Cosgrove, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Andreas Kuzma, Paul Moffat, Max, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, Andre van Soest, lululombard, Armando Fox, Nelson, Angelo van der Sijpt, William Evans, Philip, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Mats Svardal, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Dave Howlett, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Lauren Hahn, kalleboo, Marcel de Jong, Vaughn B., Breunie Ploeg, Braden McDorman, Stephen Bank, Julien Oster, Dr. Bjoern Bieber, Anders Enger Jensen, Juan Molinari, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, PJ Gunasekera, Adisibio, Michael Holmes, John Piontkowski",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ZZC0SP02PqY/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ZZC0SP02PqY/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ZZC0SP02PqY/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ZZC0SP02PqY/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ZZC0SP02PqY/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 23,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ZZC0SP02PqY"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/Drnmo0FPPThFoqWaYe4p262lHgk\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmNjbmVFX2drU0Fz",
   "snippet": {
    "publishedAt": "2019-04-28T14:35:41.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Flexplay: The Disposable DVD that Failed (Thankfully)",
    "description": "You can support this channel on Patreon! Link below    \nHave you ever run across a cool idea that you desperately hope doesn’t catch on? Flexplay is one of those. In this video, we’ll talk about what it is, why it was crazy to think it would go anywhere, and why it’s probably a good thing it didn’t.\n\nDid you know you can follow these links? It’s pretty neat. I heard about it on the Internet.\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (the channel where I sometimes talk about stuff and generally don’t prepare for anything):\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\n\nPhillip Cosgrove, Joshua Doades, Ennex The Fox, Steve Kralik, Your name, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, Rennix, Charles, Sebastian Sparrer, Andreas Kuzma, Paul Moffat, Max, Ryan Benson, Neil Forker, Vincent Beelte, James Pinakis, Johnni Winther, Mark Hesse, Nathan Blubaugh, Andre van Soest, lululombard, Armando Fox, Nelson, Kajico, Angelo van der Sijpt, William Evans, Philip, VilleS, Anton Afanasev, Kilrah, Ray, Liam O'Flynn, Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Peter Stewart, Patrick Barry, Robin Johnsen, Nomad, Eric, Phia Westfall, Mats Svardal, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Dave Howlett, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Lauren Hahn, kalleboo, Marcel de Jong, Vaughn B., Braden McDorman, Stephen Bank, Julien Oster, Dr. Bjoern Bieber, Anders Enger Jensen, Juan Molinari, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, PJ Gunasekera, Adisibio, Michael Holmes, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Mat Stu, RYAN NGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rühmkorf, Jack Nichol, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Max Barnash, Microfrost, MrSonicOSG, Sinirlan, rusty shakelford, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Steve Trambert, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Troy King, Some Random, Peter Sarossy, Leigh Beattie, Tracy Cogsdill, Matt Allaire, Dave Mausner, Guy, John Hickey, Benjamin Gott, Luke, Rayne Luna, Zach Le, Fredrik Østrem, Greg Hodgdon, Anil Dash, Michael Wileczka, Chris Wolf, John Ehler, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Kenneth Morenz, Andy, Greg Stearns, Linus Eustace, Zack, Robert L LaBelle, Chris Satterfield (Compgeke), Brian Johnson, Jon Hay, Hyunseung Park, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, John Marshall, Hsin-Kuei Chen, Henry Desai, Damian, David Anez, Josiah Keller, M T Bono, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, Manuel Zeschko, Biking With Panda, Chris Larsen, David Pechon, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Ian Pirner, Mark Stone, Adelaide Leslie Baker, Arthur Zalevsky, John Fruetel, Jonathan Mayfield, Adam Veneziano, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, a ray, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Sebastian Stenner, Leftie, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Rainbow Warrior, jacob kamphaus, Alex Hurley, Andrew Bobulsky, Jennifer Briggs, Peter Beckman, Matthew R, Richard Sams, Andy Kettu, On Ice Perspectives, Brian Wright, TheGreatCO, Sam Lowry, Marcus, Ethan R, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Tom Ebenhoe, Casey Blackburn\n\nPst! If you haven’t seen your name here, don’t worry quite yet! The Patron list is in a state of transition and you might be appearing somewhere else, shortly!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ccneE_gkSAs/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ccneE_gkSAs/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ccneE_gkSAs/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ccneE_gkSAs/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ccneE_gkSAs/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 24,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ccneE_gkSAs"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/jL9LIWaEbf7FuvG6nVXbj25H5FM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjFPZnhsU0c2cTVZ",
   "snippet": {
    "publishedAt": "2019-04-19T16:12:58.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Antique Toaster that's Better than Yours",
    "description": "You can support this channel on Patreon! Link below   \nThat title isn’t hyperbole or clickbait nonsense. This really is better than your toaster. At least, I think so. Seriously, can we make this the norm, please? If we figured it out in 1948, you’d think we woulda kept going with it. I mean, really.\n\nLooking for the previous video?\nhttps://youtu.be/zLFG068HtgM\n\nHow about the second channel video where we improve and fix these?\nhttps://youtu.be/2vcdbtAca0Y\n\nWant to read those patents that were on the screen? You’re in luck! They’re right here!\nHere’s the patent for the toaster itself:\nhttps://patents.google.com/patent/US2667828\nAnd here’s the patent for the thermostat:\nhttps://patents.google.com/patent/US2459170A\n\nAlso, here’s a link to that fan-site I mentioned;\nhttp://automaticbeyondbelief.org/\n\nDo you want more of these videos to happen? Well then, you should know that you can support this channel on Patreon! Patrons of the channel have turned Technology Connections from sporadic hobby to… well, my job! And it’s super cool! If you’d like to join the fine folks you saw on-screen in pledging some support, please check out my Patreon page. Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!Yaniv, Tab Patterson, Francis Fisher, The War Academy, Conor Killeen, Paul Emmerich, Jason R Scheuren, Dave Anderson, Noah McCann, Eric Hansen, Dane Peterson, Steven First, Audin Malmin, Adam D. Ruppe, Rafał Wiosna, Matthew Giraitis, Kevin Landrigan, Harald E. Westlie, Carl Yazbek, Stephen Bell, Logan Kriete, Hunter Schwisow, Matt Falcon, Kieran Cox, Eric Wood, Paul Williams, Brent LaRowe, Lurker239, Felix Freiberger, James Ryan, Lukas Komischke, Steven Hidy, Robert Joscelyne, Jason Nevins, Jeffrey, BlancoGrande, Stephen Pick, Logan Beenken, Technicalleigh, John McLusky, Adam Coddington, Lolucoca, Steven Metcalf, Justin Talbot, Christopher Jett, Elijah Reeds, Mike Mason, Techmoan, Brendan Terrett, Kotanu, Christopher Luna, Paul Mills, Colton Aubrey Hooke, Brian G. Shacklett, Eduardo Kaftanski, Steve Stone, Chris Hartl, Gantradies, Andre N, Tony, Matthew Baron, Revenge, Andres Plaza, Charlie Hankin, Casey Kikendall, Sebi Jecklin, Warmo, The8TrackKid, Drew McClain, Michael Snowden, Ed Hall, Julian Rapoport, Christopher Bassett, Ryan Cozzubbo, Marcus Schwartz, Johan Schoeman, Matt Taylor, Patrick Musson, Lars JJ, Richard Lindsey, Kollin O'Dannel, PK, blouerat, Robert Toth, Joseph Hill, Marc Ethier, Giacomo Scaparrotti, Brady Brown, Stein Strindhaug, foophoof, Ernie Smith, Tim Juchcinski, Christopher Dickey, Denver Alexander, Jan Stavel, Mitchel J. Mullin II, Matthew Razza, Trix Farrar, Marco Anastasi, Pavlo Pravdiukov, Raymond LaRose, Howard Kraut, Mike Bailey, Yona, neko, Grayson Lang, Thomas Beaver, Jeffery Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Clint Eisinger, Christopher Leidich, Mike Friedman, André Waage Sørensen, Sam Douglas, Sam Redfern, mark barratt, Tully, Duncan Ward, fussel, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Eric Romero, Ryan Hardy, Taylor Martin, Nicholas, thefanification, Ewen McNeill, Shane Zamora, John Bailey, Alex Ilyin, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Brian Condron, Reto Jost, Torin Zaugg, Vince Terranova, Andrew Montagne, David Scott, Mike Nichols, Brandon Enright, James Fialho, Christian Torelli, toasterking, Jason Brady, Norman Tatlock, ce keen, Nick Pollard, David Grossman, Manalope, Andy S, Robert, Johan Greefkes, Jacob Dixon, Rob Kefford, Eric Butterfield, Tim Skloss, Benjamin A., James-Ross Harrison, Nathaniel, Colin Cogle, Aaron Rennow, Yota Ninja, Bee Jay, Countzero, Kodapan, Eli Krumholz, Guillaume Tremblay-Beaumont, Sha Nasti, Charles Surett, Laria, Stephen B Hinton, thegeoffreak, f. scott b., Piotr Kowalski, Elliot Clark, Bob Slovick, Jason Burgett, Jib Systems, Andrew Rosenwinkel, Grazer, Tero Janhunen, Bob B, Mike Noe, Scott Rowland",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/1OfxlSG6q5Y/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/1OfxlSG6q5Y/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/1OfxlSG6q5Y/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/1OfxlSG6q5Y/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/1OfxlSG6q5Y/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 25,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "1OfxlSG6q5Y"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/axRJ4AigjvIVU3hX8RvrwwJ_yEk\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnl0cFJuUmtlNkkw",
   "snippet": {
    "publishedAt": "2019-04-09T14:41:08.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "E-Ink on Android, and other new things!",
    "description": "Big things are coming soon. In some ways, they already have!\n\nHere are some links, they're farm fresh and ready-to-eat! Yum!\n\nThe Second Channel Video:\nhttps://youtu.be/7NfX0vlCa4k\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nNormally, I put a list of people here who support me on Patreon. For almost as long as I've had the page, there hasn't been enough room to fit everyone, so only some people appeared, and on a rotating basis.\n\nWhile I still can't fit you all here, this video is dedicated to all of the amazing folks around the globe who are supporting the channel. Thank you for your tremendous support, and for making the new Headquarters a reality!\n\nIf you'd like to join them, click here. And thank you for your consideration!\nhttps://www.patreon.com/technologyconnections",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ytpRnRke6I0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ytpRnRke6I0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ytpRnRke6I0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ytpRnRke6I0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ytpRnRke6I0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 26,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ytpRnRke6I0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/tFeHJYcKcJrx-9MePy4BME5yS7U\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmRoUmd3MEhmcllV",
   "snippet": {
    "publishedAt": "2019-03-30T13:49:20.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Exploring the World of E-Ink",
    "description": "You can support this channel on Patreon! Link below   \nIt’s ink. But better!\nThere be links here, so ye best be expanding this out now to see what treasures lie below…\n\nVideos referenced:\n\nTechmoan’s video on the Sony Data Discman\nhttps://www.youtube.com/watch?v=MXXiRJAKC4w\n\nApplied Science’s E-Ink Experiments\nhttps://www.youtube.com/watch?v=MsbiO8EAsGw\n\nOther clicky goodness:\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nSteve Salecan, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Andrew Eslick, The Mechanical Philosopher, Dean Winger, Jonathan Austin, Daniel Pf, Mark, Martin Note, Yung Kim, Sam Bennett, John W Campbell, Grazer, Matthew Holloway, Zach Komon, Slappy826, Steven Ingles, Kevin Tessner, Matthew Beckwell, Robert Howcroft, Bobby Young, Jesse Kempf, Troy King, Some Random, Mikhail Lavrentyev, Jeremy Heiden, MrVestek, Alexander Feld, Garrick Kwan, Toygar Karadeniz, Peter Sarossy, Leigh Beattie, Favian (pronounced Fay-Vee-En), Matt Allaire, Michael Scheliga, John Kieran, Aaron Hurd, Dave Mausner, Scott Cameron, Guy, Eli Krumholz, Mike Burkman, John Hickey, Benjamin Gott, Ryan Hardy, Marco Arment, Owen Walpole, Luke, James McMillan, Vladi Ivanov, Zachary Le, Gord Allott, Fredrik Østrem, Greg Hodgdon, Anil Dash, Simon Safar, Michael Wileczka, Thomas J DuVally,  John Ehler, Bobby Vickery, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Pavel Šotkovský, Kenneth Morenz, Andy, Andreas, Sinirlan, Adam Merolli, Laurence Gonsalves, Brad Brewster, Linus Eustace, Zack, Robert L LaBelle, Kevin Landrigan, Chris Satterfield (Compgeke), Potch, Brian Johnson, Justin Sison, Jon Hay, Andri Bjarkason, vax11, Greg Stearns, Jason Baker, A.J.R., BSc SSc, Travis Koch-Gensiorek, Merlin Mann, Hyunseung Park, Melanie Kincaid, Cameron Benton, Samuli Suomi, Keith McCready, Bruno Enton, VilleS, Andres Farias, Mathias Fall, Denzil Wilson, Jeffrey Glover, Dan Shelley, John Marshall, Hsin-Kuei Chen, Jake Skeates, Amy Lee, Jack Theakston, Alex van Herwijnen, Jeffrey Heath McClure, Damian, David Anez, Daniel „DaneeBound“ Brack, Josiah Keller, Benjamin, M T Bono, Steve Streza, Conall Ó Maitiú, Struan Clark, Keeb, Tarrien, Manuel Zeschko, Biking With Panda, Chris Jervis, Michaël Hompus, Evan “Endar” Miller, Chris Larsen, Brad Brewster, David Pechon, Cory Benfield, Michael Romero, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Ian Pirner, Mark Stone, Bryan L Mon, Benjamin Nolan, Adelaide Leslie Baker, Arthur Zalevsky, Alan Phelps, John Fruetel, Jonathan Mayfield, Adam Veneziano, Andrew Diamond, Cole Campbell, Marcel de Jong, Adam Coddington, Scarfacecapwn, Christopher Beattie, Paul Bryan, Samuel Kirzner, Corey Maertz, Gus Polly, a ray, James, Maroon Smits, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Sebastian Stenner, Leftie, Malcolm Miles, Matthew Lloyd, Drew Palmquist, David L Jones, Cole Davidson, Matthew Burket, Mike Burns, SesMoge, Andrew Roland, Mark Whittington, TheDoctor40, Luke Whiting, John Cockerill, Cameron Tidd, Justin Hendryx, Chris Wolf, David Groover, Bill Danbury, Michael Wehner, Rainbow Warrior, jacob kamphaus, Adisibio, Alex Hurley, Dejan Zoranovic, Andrew Bobulsky, Johnathan Chamberlain, Vegard Hanssen, Jennifer Briggs, Peter Beckman, Matthew R, Richard Sams, Arthur Robillard, Andy Kettu, Henry Desai, One Ice Perspectives, Brian Wright, TheGreatCO, Sam Lowry, Marcus",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/dhRgw0HfrYU/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/dhRgw0HfrYU/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/dhRgw0HfrYU/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/dhRgw0HfrYU/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/dhRgw0HfrYU/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 27,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "dhRgw0HfrYU"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/75wimFHoOEK66upBcapRkbflHS4\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnpMRkcwNjhIdGdN",
   "snippet": {
    "publishedAt": "2019-03-15T15:38:11.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Electromagnet in Your Toaster",
    "description": "You can support this channel on Patreon! Link below        \nYa ever wonder about what’s in a toaster? No? Well, too bad ‘cause you’re gonna find out right now!\n\nWould you like some links? Have some links!\n\nThe datasheet for our IC in question:\nhttps://www.datasheet4u.com/datasheet-pdf/ETC/A0201F/pdf.php?id=716573\n\nHere’s a link to the Sunbeam ad. I didn’t realize that LIFE magazine is all in Google Books now, or at least a good chunk of it. Kinda fun to go through the old ads.\nhttps://books.google.com/books?id=LlIEAAAAMBAJ&lpg=PA78&dq=sunbeam%20toaster%20effortless&pg=PA78#v=onepage&q&f=false\n\nThat toaster, by the way, has some dedicated fans. Learn more about it here:\nhttp://www.automaticbeyondbelief.org/gallery.htm\n\nHere’s that patent I talked about:\nhttps://patents.google.com/patent/US4518849\n\nAnd here are some more pressy pressy fun times:\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\n\nJib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Νικο Σα, Hank Eskin, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, JustWusky, Dan Jones, Exilis, Owen O Byrne, Project A118, Charles, Sebastian Sparrer, timeslapsey, George Stamoulis, Paul Moffat, Linh Pham, Laria, Michael Greb, Max, Alessandro Robert Nilsen, Ryan Benson, fussel, Brannan Barber, Jonathan Haas, Neil Forker, Vincent Beetle, Warmo, James Pinakis, Bruce Davis, Conor Kileen, Johnni Winther, Marke Hesse, Brian M Knoblock, Sean Sandercock, Robert Wolfanger, Cannon Fodder, Andre van Soest, lululombard, Nicholas Boccio, Armando Fox, Nelson, bluegoose, Kajico, Jason Hughes, Eli Krumholz, Angelo van der Sijpt, William Evans, Philip, Martin, X39, Richard Lantz, Gideon Rigger, Oliver Lee, AJay Janschewitz, Lennart Sorensen, Mitch Radoll, Viorel, Reachan Kekeis, Loh Phat, Vivian Pypher, Torin Zaugg, John Donaldson, Brandon Whiting, Robert Tait, Zachary Hazlett, Nathan Blubagh, Joel, Peter Stewart, Liam O’Flynn, Russell Brower, Brannan Barber, Patrick Barry, Tyler, Robin Johnsen, Brian Wolman, Deryn Rouge, Eric, Phia Westfall, Markus Schumacher, Besenyei Adam, Colin Grimshaw, Mats Svardal, Shannon Potter, Jeremy Hastings, Mark Wayt, Matthew Reynolds, Andrew Mertzenich, John Lavallée, Dave Howlett, Matthew E. Cooper, Sonic the Anonymous Hedgehog (nice), Guilherme Vieira Dutra, Lee Tustain, Nathan Bruer, Lauren Hahn, Scott Rowland, Will Wren, Weird shortwave listener, kalleboo, Colin Hill, William Gray, Vaughn B., Sven Slootweg, Braden McDorman, Stephen Bank, Matthew Walster, Julien Oster, Joseph Dufour, Dr. Bjoern Bieber, Anders Enger Jensen, Phil Sowers, Juan Molinari, Jake Hickman, Trae Palmer, Ray, Robert McCullough, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, PJ Gunasekera, Charles Zilinski, Aaron Helton, Michael Holmes, Reto Jost, Thomas Beaver, AwesomeGuy64, Trey Harris, Benjamin Kier, Fredrik Grufman, Peter Pfundstein, Carlos V, Wilhelm Screamer, Jeffrey Frasure, Mat Stu, RYAN NGOGLIA, Harald E. Westlie, Charlycobra, Thomas Kolanus, Jeff Bigs, Brett Morgan, Isabell Reine, William Kisley, Daniel Johnson, Jesse Kempf, Tyler DeWitt, Reemt Rühmkorf,Jack Nichol, Robin Rattay, Mikko Wilson, Bruce Justyn, Rae McIntosh, Mathieu Vignau, Justin D, Adam Zawisza, Thomas Ausweger, Kyle Joynt, Matthew Holder, shawnski, Max Barnash, Microfrost, MrSonicOSG, William Bevans, rusty shakelford, Tim Alston, Mitch Schenk, Burak Laciner, Juan Oliveras, Charles Ball, Robert Holt, Mikhail Lavrentyev, Mike Bird, Vance Vagell, Emmett Ray, Michael Shaffer, Tianyu Ge, blalu’u, Taylor Martin, Racecar378, Steve Trambert, Sputnik\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/zLFG068HtgM/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/zLFG068HtgM/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/zLFG068HtgM/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/zLFG068HtgM/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/zLFG068HtgM/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 28,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "zLFG068HtgM"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/bhZldGnRy8wPNQ1-cOQ3GjgsiM8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlEyYTlZdm8yWXln",
   "snippet": {
    "publishedAt": "2019-02-26T16:43:19.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Story of Disney's PeopleMover in Texas",
    "description": "You can support this channel on Patreon! Link below   \nThis is the fun, weird, and surprisingly complicated story of Disney’s PeopleMover attraction and how it ended up somewhere unexpected. And maybe even somewhere *really* unexpected!\n\nLinks ‘n Stuff:\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nThe Follow-up TC2 Video\nhttps://youtu.be/Wm1fxMzGuU4\n\nCheck the pinned comment for lots of really great links to related resources, videos, and other goodies!\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nDane Peterson, Brent LaRowe, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, Sen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson, Sha Nasti, Charles Surett,Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh,\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next three videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/Q2a9Yvo2Yyg/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/Q2a9Yvo2Yyg/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/Q2a9Yvo2Yyg/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/Q2a9Yvo2Yyg/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/Q2a9Yvo2Yyg/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 29,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "Q2a9Yvo2Yyg"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/rTddJI54ckMRQiksGIDi4olmDWM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlYtam1TankyQXJN",
   "snippet": {
    "publishedAt": "2019-02-13T12:47:05.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Space Heater Nonsense",
    "description": "You can support this channel on Patreon! Link below   \nUnless my understanding of the universe is deeply flawed, something about space heaters just doesn’t add up. In this video, I talk about that.\n\nSo, why did I make this a second time? Well hop on over to here and we’ll talk about it;\nhttps://youtu.be/Znt9WR5hhjE\n\nLinks ‘n Stuff:\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nCharlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Callum Brieske, Tomas, Chuck Floyd, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, jeekl, rozboris, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, T.J. Steckbeck, Pavlo Pravdiukov, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin, Andres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next three videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/V-jmSjy2ArM/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/V-jmSjy2ArM/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/V-jmSjy2ArM/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/V-jmSjy2ArM/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/V-jmSjy2ArM/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 30,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "V-jmSjy2ArM"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/hS4NlUczXdstfob0_PHRS2ZJ3j8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlpySm1YdnhYakQw",
   "snippet": {
    "publishedAt": "2019-02-04T14:59:53.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Time-Lapse VCR",
    "description": "You can support this channel on Patreon! Link below      \nAnalog video and frame-by-frame review don’t usually go nicely together (unless of course you’ve got a CAV Laserdisc onhand). So how did security camera systems stretch the normal recording time of VHS from a couple of hours to upwards of a week? Why, with ingenuity of course! Watch this video and find out the juicy secrets!\n\nLinks ‘n stuff\n\nThis is a great resource, provided by a Patron (Thanks!!), which explains the difference between 2 and 4 head VCRs (as well as other great stuff!):\nhttp://www.ronaldsnoeck.com/vcr.htm\n\nThis book result had a great section on time-lapse recording:\nhttps://books.google.com/books?id=ysg7w5aGDzEC&pg=PA167&dq=%22time+lapse+vcr%22&hl=en&sa=X&ved=0ahUKEwj3usi3zpHgAhWn7oMKHXwCCqMQ6AEIMTAB#v=onepage&q=%22time%20lapse%20vcr%22&f=false\n\nHere’s the manual to the SVT-3050P if you’re curious about some of the other stuff this can do:\nhttps://pro.sony/s3/cms-static-content/operation-manual/3193023022.pdf\n\nAnd, here’s some info on quads, multiplexers, and switchers:\nhttps://www.videoexperts.com/faq/quads-vs-multiplexers/\n\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit\nhttps://www.reddit.com/r/technologyconnections\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nSteve Salecan, Jason Spriggs, Danny S., Gregory Kumpula, Chris Zaremba, Tom Burns, Andrew Eslick, The Mechanical Philosopher, Dean Winger, Jonathan Austin, Daniel Pf, Mark, Martin Note, Yung Kim, Sam Bennett, John W Campbell, Grazer, Matthew Holloway, Zach Komon, Slappy826, Steven Ingles, Kevin Tessner, Matthew Beckwell, Robert Howcroft, Bobby Young, Jesse Kempf, Troy King, Some Random, Mikhail Lavrentyev, Jeremy Heiden, MrVestek, Alexander Feld, Garrick Kwan, Toygar Karadeniz, Peter Sarossy, Leigh Beattie, Favian (pronounced Fay-Vee-En), Matt Allaire, Michael Scheliga, John Kieran, Aaron Hurd, Dave Mausner, Scott Cameron, Guy, Eli Krumholz, Mike Burkman, John Hickey, Benjamin Gott, Ryan Hardy, Marco Arment, Owen Walpole, Luke, James McMillan, Vladi Ivanov, Zachary Le, Gord Allott, Fredrik Østrem, Greg Hodgdon, Anil Dash, Simon Safar, Michael Wileczka, Thomas J DuVally,  Justin Bull, John Ehler, Bobby Vickery, William Matthews, Fred Leckie, Julian Zielke, John Rogers, Pavel Šotkovský, Kenneth Morenz\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next three videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ZrJmXvxXjD0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ZrJmXvxXjD0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ZrJmXvxXjD0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ZrJmXvxXjD0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ZrJmXvxXjD0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 31,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ZrJmXvxXjD0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/7RxzMee9YI7rYrQpi-FwQKv8TD0\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlZlTHZkRThsTlc0",
   "snippet": {
    "publishedAt": "2019-01-21T15:09:02.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Odd History of the SD Logo",
    "description": "You can support this channel on Patreon! Link below   \nSo, what’s the deal with the D? Why is it all, disclike? Last I checked, SD cards weren’t any sort of disc. What’s going on? In this video, we find out.\n\nLinks ‘n stuff\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit (I promise I do go there sometimes)\nhttps://www.reddit.com/r/technologyconnections\n\nThe DVD’s success over Laserdisc\nhttps://youtu.be/cvwuAKi1ZB4\n\nLightScribe:\nhttps://youtu.be/40hJStzsBm8\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nJib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Νικο Σα, Hank Eskin, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, JustWusky, Dan Jones, Exilis, Till Bockemühl, Owen O Byrne, Project A118, Charles, Sebastian Sparrer, timeslapsey, George Stamoulis, Paul Moffat, Linh Pham, Laria, Michael Greb, Max, Alessandro Robert Nilsen, Ryan Benson, fussel, Brannan Barber, Jonathan Haas, Neil Forker, Vincent Beetle, Warmo, James Pinakis, Bruce Davis, Conor Kileen, Johnni Winther, Marke Hesse, Brian M Knoblock, Sean Sandercock, Robert Wolfanger, Cannon Fodder, Andre van Soest, lululombard, Nicholas Boccio, Armando Fox, Nelson, bluegoose, Kajico, Jason Hughes, Eli Krumholz, Angelo van der Sijpt, William Evans, Philip, Martin, X39, Richard Lantz, Dustin Crain, Gideon Rigger, Oliver Lee, AJay Janschewitz, Lennart Sorensen, Mitch Radoll, Viorel, Betsy Ecklund, Reachan Kekeis, Loh Phat, Vivian Pypher, Torin Zaugg, John Donaldson, Brandon Whiting, Robert Tait, Zachary Hazlett, Nathan Blubagh, Joel, Peter Stewart, Liam O’Flynn, Russell Brower, Brannan Barber, Patrick Barry, Tyler, Robin Johnsen, Brian Wolman, Deryn Rouge, Ed Green, Eric, Phia Westfall, Markus Schumacher, Besenyei Adam, Colin Grimshaw, Mats Svardal, Shannon Potter, Jeremy Hastings, Mark Wayt, Jose Miguel Castillo, Matthew Reynolds, Andrew Mertzenich, John Lavallée, Dave Howlett, Matthew E. Cooper, Sonic the Anonymous Hedgehog (nice), Guilherme Vieira Dutra, Lee Tustain, Nathan Bruer, Lauren Hahn, Scott Rowland, Will Wren, Weird shortwave listener, kalleboo, Colin Hill, William Gray, Vaughn B., Sven Slootweg, Braden McDorman, Stephen Bank, Matthew Walster, Julien Oster, Joseph Dufour, Dr. Bjoern Bieber, Anders Enger Jensen, Phil Sowers, Juan Molinari, Jake Hickman, Trae Palmer, Ray, Robert McCullough, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, PJ Gunasekera, Justin Teixeira, Charles Zilinski, Aaron Helton, Michael Holmes, Reto Jost, Ken Schafer, Thomas Beaver, AwesomeGuy64, Trey Harris, Benjamin Kier, Fredrik Grufman, Peter Pfundstein, Carlos V, Wilhelm Screamer, Jeffrey Frasure, Mat Stu, RYAN NGOGLIA, R_T, Harald E. Westlie, Charlycobra, Thomas Kolanus, Jeff Bigs, Brett Morgan, Isabell Reine, William Kisley, Daniel Johnson, Jesse Kempf, Tyler DeWitt, Reemt Rühmkorf,Jack Nichol, Robin Rattay, Mikko Wilson, Bruce Justyn, Timothy Honiss, Rae McIntosh, Mathieu Vignau, Justin D, Adam Zawisza, Thomas Ausweger, Kyle Joynt, Matthew Holder, shawnski, Max Barnash, Microfrost, MrSonicOSG, William Bevans, rusty shakelford, Tim Alston, Mitch Schenk, Burak Laciner, Juan Oliveras, Charles Ball, Robert Holt, Mikhail Lavrentyev, Mike Bird, Vance Vagell, Emmett Ray, Michael Shaffer, Tianyu Ge, blalu’u, Taylor Martin, Racecar378, Steve Trambert, Sputnik\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two or three videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/VeLvdE8lNW4/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/VeLvdE8lNW4/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/VeLvdE8lNW4/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/VeLvdE8lNW4/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/VeLvdE8lNW4/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 32,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "VeLvdE8lNW4"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/Kfks2cV-hFql13cadpR2DiEqElw\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmVjSDNPVTBSNGxz",
   "snippet": {
    "publishedAt": "2019-01-11T14:52:13.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "DVD-RAM: The Disc that Behaved like a Flash Drive",
    "description": "You can support this channel on Patreon! Link below    \nDVD-R, DVD+R, DVD-RW, and DVD+RW ain’t got nothin’ on my man RAM. Oh yes, DVD-RAM, the format of mild obscurity which seems like it should have been friggin huge. Alas, it was but mildly useful.\n\nHere are some links that you can click on and they’ll take you places:\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit (I promise I do go there sometimes)\nhttps://www.reddit.com/r/technologyconnections\n\nThe second channel video that I talked about\nhttps://youtu.be/U9aZuFOTHtQ\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\n\nAnd thank you to the following patrons!\nDane Peterson, Brent LaRowe, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, Sen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph, Pavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson, Sha Nasti, Charles Surett, Ed Green, Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ecH3OU0R4ls/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ecH3OU0R4ls/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ecH3OU0R4ls/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ecH3OU0R4ls/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ecH3OU0R4ls/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 33,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ecH3OU0R4ls"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/VtuwkQdJ35QlNegGPHF9-giv_IU\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLmh6X21NTGhVaW53",
   "snippet": {
    "publishedAt": "2018-12-25T13:19:31.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Superheterodyne Radio: No really, that's its name",
    "description": "You can support this channel on Patreon! Link below   \nThe superheterodyne receiver may seem like a radio with a silly name, but in fact it’s a completely logical name that describes the key action these radios take to become excellent radios. The superhet solved a tricky problem in a clever way, and using our friend Algebra (as well as wave phenomena) proved to be the most effective way of tuning in a radio signal.\n\nTechnology connections on Twitter (I’m just as weird on the social Internet as I am here on YouTube):\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit (warning: I’m not good at Reddit)\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (my second channel where I upload weird stuff from time to time)\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nCharlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Callum Brieske, Tomas, Chuck Floyd, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, Michael Pacheco, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, Tianyu Ge, jeekl, rozboris, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, T.J. Steckbeck, Pavlo Pravdiukov, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin, Andres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, \nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/hz_mMLhUinw/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/hz_mMLhUinw/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/hz_mMLhUinw/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/hz_mMLhUinw/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/hz_mMLhUinw/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 34,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "hz_mMLhUinw"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/IhycwjoYvk-iOSUcNVjyIl24vxs\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjZTTDZ6czJiRGtz",
   "snippet": {
    "publishedAt": "2018-12-12T15:57:53.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Closed Captioning: More Ingenious than You Know",
    "description": "You can support this channel on Patreon! Link below  \nOver the years I’ve found that there are plenty of people who use captions, not just those who need them. But did you know that it took until the 1970’s for anyone to think of putting captions on TV? I can sort of understand that, since captions might be annoying if you don’t want them, but closed captioning would save the day and provide access to all, but only when needed.\n\nHere's the link for making translated captions for my videos:\nhttp://www.youtube.com/timedtext_cs_panel?tab=2&c=UCy0tKL1T7wFoYcxCe0xjN6Q\nPlease don't feel compelled to do it, but if you'd like to give a bit of your time, I promise you'll get that imaginary badge! \n\nTechnology connections on Twitter (I’m just as weird on the social Internet as I am here on YouTube):\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit (warning: I’m not good at Reddit)\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (my second channel where I upload weird stuff from time to time)\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nHere’s that nifty Chicago Tribune article:\nhttps://www.chicagotribune.com/news/ct-xpm-1989-05-05-8904100174-story.html\n\nAnd here’s those captioning glasses:\nhttps://www.smithsonianmag.com/innovation/teen-inventors-create-live-closed-captioning-glasses-deaf-180957155/\n(sadly, it looks like the creators had started an indiegogo for this, and it failed pretty badly. Quite a shame, as this could be quite useful! However, I suppose a phone app might be good enough. Might be)\n\nSome history from the NCI:\nhttp://www.ncicap.org/about-us/history-of-closed-captioning/\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following patrons!\nSha Nasti, Charles Surett, Ed Green, Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh, Jib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Rob Rymarczyk, Scarfacecapwn, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Νικο Σα, Hank Eskin, Kirill Polstainen, Felix Winkelnkemper, Christopher Lawhead, BoostCookie, 98abaile, JustWusky, Dan Jones, Exilis, Till Bockemühl, Owen O Byrne, Project A118, Charles, Sebastian Sparrer, timeslapsey, George Stamoulis, Sarmad Gilani, Paul Moffat, Linh Pham, Laria, Michael Greb, Max, Alessandro Robert Nilsen, Ryan Benson, fussel, Brannan Barber, Jonathan Haas, Neil Forker, Vincent Beetle, Warmo, James Pinakis, Bruce Davis, Conor Kileen, Johnni Winther, Marke Hesse, Brian M Knoblock, Sean Sandercock, Robert Wolfanger, Cannon Fodder, Andre van Soest, lululombard, Nicholas Boccio, Armando Fox, Nelson, bluegoose, Kajico, Jason Hughes, Eli Krumholz, Angelo van der Sijpt, William Evans, Philip, Martin, X39, Richard Lantz, Dustin Crain, Gideon Rigger, Oliver Lee, AJay Janschewitz, Lennart Sorensen, Mitch Radoll, Viorel, Betsy Ecklund, Reachan Kekeis, Michael Scott, Sha Nasti, Loh Phat, Vivian Pypher, Torin Zaugg, John Donaldson, Brandon Whiting, Robert Tait, Zachary Hazlett, Steven Lynch, Nathan Blubagh, Joel, Peter Stewart, Liam O’Flynn, Russell Brower, Brannan Barber, Patrick Barry, Tyler, Robin Johnsen, Brian Wolman, Deryn Rouge, Ed Green, Eric, Phia Westfall, Markus Schumacher, Besenyei Adam, Colin Grimshaw, Mats Svardal, Shannon Potter, Jeremy Hastings, Mark Wayt, Jose Miguel Castillo, Matthew Reynolds, Andrew Mertzenich, John Lavallée, Dave Howlett, Matthew E. Cooper, Sonic the Anonymous Hedgehog (nice), Guilherme Vieira Dutra, Lee Tustain, Nathan Bruer, Lauren Hahn, Scott Rowland, Will Wren, Weird shortwave listener, kalleboo, Colin Hill, William Gray, Vaughn B., Sven Slootweg, Braden McDorman, Stephen Bank, Matthew Walster, Julien Oster, Joseph Dufour, Dr. Bjoern Bieber, Anders Enger Jensen, Phil Sowers, Juan Molinari, Jake Hickman, Trae Palmer, Ray, Robert McCullough, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Andrew Miller, PJ Gunasekera, Justin Teixeira, Charles Zilinski, Aaron Helton, Michael Holmes, Reto Jost, Ken Schafer, Thomas Beaver, AwesomeGuy64, John Wagner, Trey Harris, Benjamin Kier, Fredrik Grufman, Peter Pfundstein, Carlos V, Wilhelm Screamer, Jeffrey Frasure, Mat Stu, RYAN NGOGLIA, R_T, Harald E. Westlie, Charlycobra, Thomas Kolanus, Jeff Bigs, Brett Morgan, Isabell Reine, William Kisley, Daniel Johnson, Jesse Kempf, Tyler DeWitt, Reemt Rühmkorf",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/6SL6zs2bDks/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/6SL6zs2bDks/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/6SL6zs2bDks/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/6SL6zs2bDks/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/6SL6zs2bDks/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 35,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "6SL6zs2bDks"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/x9ZID8D02mbkXhlIZMXar0_tYno\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlBCRlBKM182Wldz",
   "snippet": {
    "publishedAt": "2018-11-26T14:38:30.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "LED Experiments: Making Holiday Lights Less Garish",
    "description": "You can support this channel on Patreon! Link below     \nHow could I forget about the hmm-hmm light experiments? And/or; holy hard drives it’s already Decemberween? My how the year has passed in a flash. Just like these lights! HA!\nYeah, so here’s the thing--I owed you this video. And honestly, the results were great! I have some more work to do (assuming no one listens to my plea toward the end) but now I know that what I want is at least vaguely possible.\n\nTechnology connections on Twitter (I’m just as weird on the social Internet as I am here on YouTube):\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit (warning: I’m not good at Reddit)\nhttps://www.reddit.com/r/technologyconnections\n\nTechnology Connections 2 (my second channel where I upload weird stuff from time to time)\nhttps://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA\n\nOh--and a music credit! The closing music was\n\"We Wish You a Merry Christmas (Instrumental Jazz)\" by E's Jammy Jams. You can get it for free--right now!--from the YouTube Audio Library. And here's a secret--my normal outtro song? It's from there, too. Just search \"Floaters\" and you'll find it. Don't tell anyone.\n\nYou can support this channel on Patreon! It has been amazing what Patreon has done for this channel, but also for me (your dorky host) personally. Through the support of people just like you, Technology Connections has become my job and I am so excited and thankful for it! If you’d like to join the fine folks in a pledge to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons:\nGerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, Dane Peterson, Brent LaRowe, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Daniel Ch, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, Sen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph, Pavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Ulti, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, Alex Corn, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson\n\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/PBFPJ3_6ZWs/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/PBFPJ3_6ZWs/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/PBFPJ3_6ZWs/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/PBFPJ3_6ZWs/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/PBFPJ3_6ZWs/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 36,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "PBFPJ3_6ZWs"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/-ELaZWzG1agA2VJSWifbuCLooU8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjQwaEpTdHpzQm04",
   "snippet": {
    "publishedAt": "2018-11-10T14:08:23.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "LightScribe: HP's Clever Twist on the CD Burner",
    "description": "You can support this channel on Patreon! Link below   \nI remember when LightScribe was first marketed, and let me tell you I thought it was *the* *coolest* *thing* to ever happen. Burning labels with lasers? No way! Well, it worked amazingly well. LightScribe wasn’t without its flaws, though, and in this video we’ll discuss a bit of its history, how it worked, and why it wasn’t a runaway success.\n\nSome links and stuff!\nBasic info and some details of operation came from here:\nhttps://www.pcworld.com/article/121297/article.html\n\nThis is a patent you can look at for a LightScribe drive made in 2011 (kinda near the end of the run)\nhttps://patentimages.storage.googleapis.com/f1/5b/55/752ceaa7c6f109/US8040367.pdf\n\nIf you happen to have a LightScribe drive and some media, but you’ve never installed anything to let you use it, check out Steve’s website. Some notes on compatibility--Apparently his free labeler doesn’t work with Windows 10. The LightScribe utilities do, and so does Nero 8 for what it’s worth. But if you’re desperate to get your Win10 PC into the LightScribe universe, you may face some challenges.\nhttps://lightscribesoftware.org/\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe TC Subreddit:\nhttps://www.reddit.com/r/technologyconnections/\n\nYou can support this channel on Patreon! Through the amazing support of people just like you, this channel has gone from my weird hobby to my full time job! Thank you for making that possible. With your help, the channel is growing while at the same time staying free of outside influence. If you’d like to pledge some support to help the channel grow, please check out my Patreon page. Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!Charlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Callum Brieske, Tomas, Chuck Floyd, Eitan Tal, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, TeaChest Media, Michael Pacheco, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, Tianyu Ge, jeekl, rozboris, Kelly Rose, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, TM, T.J. Steckbeck, Pavlo Pravdiukov, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Matt Sackett, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, Magnus Tranum, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin, Andres Plaza, Revenge, Matthew Baron, André\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/40hJStzsBm8/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/40hJStzsBm8/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/40hJStzsBm8/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/40hJStzsBm8/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/40hJStzsBm8/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 37,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "40hJStzsBm8"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/K_dRgqwm9Eb2s2APDE2IRrT87xo\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjQ4aFctSzdmUVRN",
   "snippet": {
    "publishedAt": "2018-10-26T16:27:02.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Ubiquitous Sound That You May Have Never Noticed",
    "description": "You can support this channel on Patreon! Link below\nYa know, I just love learning about the everyday things in our world that are meant to make life a little more accessible to those with disabilities. This video is about a small (but nearly universal) thing that elevators do to make life just a bit easier for the blind and visually impaired.\n\nSome links to stuff!\n\nThere’s a Technology Connections Subreddit! And sometimes things happen there. You can check it out here:\nhttps://www.reddit.com/r/technologyconnections\n\nYou can also follow my silliness on the Twitters, where you can find me @TechConnectify\nhttps://twitter.com/TechConnectify\n\n\nAnd you can also support Technology Connections on Patreon! Thanks to the support of people just like you, Technology Connections has not only become my job, but also has been kept free of the need for sponsorships. You won’t see me do a product review or promote any companies, but I will promote the heck out of the awesome people such as yourself. If you’re interested in pledging some support to the channel, please check out my Patreon page. Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nPavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Ulti, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, Alex Corn, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson, Sha Nasti, Charles Surett, Ed Green, Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh, Jib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Malcolm Balshaw, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Rob Rymarczyk, Scarfacecapwn, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Νικο Σα, Hank Eskin, Kirill Polstainen, Felix Winkelnkemper, Alon Ververa, Christopher Lawhead, BoostCookie, 98abaile, JustWusky, Dan Jones, Exilis, Till Bockemühl, Owen O Byrne, Project A118, Charles, Sebastian Sparrer, timeslapsey, George Stamoulis, Sarmad Gilani, Paul Moffat, Linh Pham, Laria, Michael Greb, Max, Alessandro Robert Nilsen, Ryan Benson, fussel, Brannan Barber, Jonathan Haas, Neil Forker, Vincent Beetle, Warmo, James Pinakis, Bruce Davis, Conor Kileen, Johnni Winther, Marke Hesse, Brian M Knoblock, Henk Kip, Sean Sandercock, Robert Wolfanger, Olaf van der Aart, Cannon Fodder, Andre van Soest, lululombard, Nicholas Boccio, Armando Fox, Nelson, bluegoose, Kajico, Jason Hughes, Eli Krumholz, Angelo van der Sijpt, William Evans, Philip, Martin, X39, Richard Lantz, Dustin Crain, Gideon Rigger, Oliver Lee, AJay Janschewitz, Lennart Sorensen, Mitch Radoll, Viorel, Betsy Ecklund, Reachan Kekeis, Michael Scott, Sha Nasti, Loh Phat, Vivian Pypher, Torin Zaugg, John Donaldson, Brandon Whiting, Robert Tait, Zachary Hazlett, Steven Lynch, Nathan Blubagh, Joel, Peter Stewart, Liam O’Flynn, Russell Brower, Brannan Barber, Patrick Barry, Tyler, Robin Johnsen, Brian Wolman, Deryn Rouge, Ed Green, Eric, Phia Westfall, Markus Schumacher, Besenyei Adam, Colin Grimshaw, Mats Svardal, Shannon Potter, Jeremy Hastings\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/48hW-K7fQTM/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/48hW-K7fQTM/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/48hW-K7fQTM/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/48hW-K7fQTM/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/48hW-K7fQTM/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 38,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "48hW-K7fQTM"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/ZKxveGaX0Hgfh9DpY4VTxsueQiY\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlRDVFd5TnN0cEQw",
   "snippet": {
    "publishedAt": "2018-10-19T16:23:29.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "CD-ROM, CD-R, CD-RW, Books of Red, Blue, Purple, Beige, Orange, Scarlet...",
    "description": "You can support this channel on Patreon! Link below    \nThe time has come. What was once just a replacement for big black frisbees of sprially wavey soundy sounds has matured into a versatile, ubiquitous data storage solution. Would you look at that, progress on a disc! But that wasn’t all; many colors of books were published (neato, wouldn’t ya say?) and the disc went from a-thing-you-buy-with-stuff-on-it to a disc that you can put your VERY OWN stuff on it! Radical! And here’s some of that story.\n\nYou can support this channel on Patreon! With the support of people like you, this channel has grown from a small hobby into a real thing. There are big projects just around the corner, and if you’d like to help make them possible, please consider pledging some support. Thank you!\nhttps://www.patreon.com/technologyconnections\n\nIf you dare, you can follow me on Twitter for mostly silly tweets:\nhttps://twitter.com/TechConnectify\n\nAre you a Redditor? That's pretty cool. If you'd like to watch me not know how to be a Redditor, you could take a peek at this subreddit, a subreddit that I am barely responsible for;\nhttps://www.reddit.com/r/technologyconnections/\n\nAnd of course, thank you to the following Patrons!\nAndres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Roger Beal, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Verysofisticated, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, Dane Peterson, Brent LaRowe, Aerospyke, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Daniel Ch, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, Sen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/TCTWyNstpD0/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/TCTWyNstpD0/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/TCTWyNstpD0/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/TCTWyNstpD0/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/TCTWyNstpD0/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 39,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "TCTWyNstpD0"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/d2e8UMTUGuI6r--Y1kiWno-B1Qg\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjFxNGRVdDF5SzBn",
   "snippet": {
    "publishedAt": "2018-10-09T17:33:59.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "TC Projects: Lead-Acid Battery Backup",
    "description": "You can support this channel on Patreon!  Link below   \nSometimes life throws curveballs. But rather than just get hit in the face, why not do something about them? This video is a mishmash of a project, some insight on Lead-Acid Battery technology, inverters, and applications. A bit different you might say from TC’s normal stuff, but what’s life without a little variety?\n\n*There are definitely different ways to charge lead-acid batteries, with different strategies optimized for different results. However, for general 12V applications, a large battery and a slow-ish charger for a car battery will be an A-OK combo.\n\nHere’s a link to the battery monitor--a really neat thing, I should say:\nhttps://www.amazon.com/DROK-Capacity-Indicator-Electric-Quantity/dp/B071HW4QHL/ref=sr_1_5?ie=UTF8&qid=1538883912&sr=8-5&keywords=battery+monitor+drok\n\nAs far as batteries and inverters, go with whatever you like. But definitely don’t use a car battery. At a minimum, look for a marine deep cycle, and if you can get your hands on a pair of golf cart batteries or a 12v true deep cycle from brands like Trojan, do that.\nFor inverters, I would recommend a pure sine inverter for most applications, but unless you plan on running some heavy stuff from a large battery bank, what’s shown in the video is way way way way way overkill. \n\n\n\nYou can support this channel on Patreon! With the support of people like you, this channel has grown from a small hobby into a real thing. There are big projects just around the corner, and if you’d like to help make them possible, please consider pledging some support. Thank you!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!Pavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Ulti, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, Alex Corn, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson, Sha Nasti, Charles Surett, Ed Green, Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh, Jib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Malcolm Balshaw, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Rob Rymarczyk, Scarfacecapwn, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Νικο Σα, Hank Eskin, Kirill Polstainen, Felix Winkelnkemper, Alon Ververa, Christopher Lawhead, BoostCookie, 98abaile, JustWusky, Philip Kohler, Dan Jones, Exilis, Till Bockemühl, Owen O Byrne, Project A118, Charles, Sebastian Sparrer, timeslapsey, George Stamoulis, Sarmad Gilani, Paul Moffat, Linh Pham, Laria, Michael Greb, Max, Alessandro Robert Nilsen, Ryan Benson, fussel, Brannan Barber, Jonathan Haas, Neil Forker, Vincent Beetle, Warmo, James Pinakis, Bruce Davis, Conor Kileen, Johnni Winther, Marke Hesse, Brian M Knoblock, Henk Kip, Sean Sandercock, Robert Wolfanger, Olaf van der Aart, Cannon Fodder, Andre van Soest, lululombard, Nicholas Boccio, Armando Fox, Nelson, bluegoose, Kajico, Jason Hughes, Eli Krumholz, Angelo van der Sijpt, William Evans, Philip, Martin, X39, Richard Lantz, Dustin Crain, Gideon Rigger, Oliver Lee, AJay Janschewitz, Lennart Sorensen, Mitch Radoll, Viorel, Betsy Ecklund, Reachan Kekeis, Michael Scott, Sha Nasti, Loh Phat\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/1q4dUt1yK0g/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/1q4dUt1yK0g/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/1q4dUt1yK0g/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/1q4dUt1yK0g/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/1q4dUt1yK0g/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 40,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "1q4dUt1yK0g"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/JadzCkei1PSkFN9QUBiIu69CepY\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjdvbE5pTUN6OXRv",
   "snippet": {
    "publishedAt": "2018-09-28T16:08:36.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "CDs: More to Talk About (Sony vs. Philips)",
    "description": "You can support this channel on Patreon!  Link below   \nWell, it’s time to answer that question that’s been burning in your minds.  There’s lots of good stuff down here, so please to expand it to see!\n\nFirst, some links!\n\nThe oscilloscope segment was highly condensed for this video, and you can find a full version here:\nhttps://youtu.be/SEFbeXH4tB8\n\nThis is a link to the Technology Connections 2 video I was talking about:\nhttps://www.youtube.com/watch?v=a47kMoYkES0\n\nHere's a link to the datasheet for the Sony chip:\nhttps://pdf1.alldatasheet.com/datasheet-pdf/view/47018/SONY/CXD2500AQ.html\n\nTechmoan’s Tiny Discman video:\nhttps://www.youtube.com/watch?v=AowJGns66_4\n\n\nYou can support this channel on Patreon!  Through the generous support of people like you, this channel has gone from my weird hobby to my full-time job.  Thanks to the support of Patrons, I can run this channel without any outside sponsorship, which is how I’d like to keep it.  If you’re interested in supporting the channel as well, please check out my Patreon page at the link below.  Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\n\nAnd thank you to the following Patrons!\nAndres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Roger Beal, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Verysofisticated, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, Dane Peterson, Brent LaRowe, Aerospyke, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Daniel Ch, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Philip Daniel, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, MagicMatteo, Sen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/7olNiMCz9to/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/7olNiMCz9to/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/7olNiMCz9to/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/7olNiMCz9to/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/7olNiMCz9to/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 41,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "7olNiMCz9to"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/Fsxboz4eg3bHN-up2BUNEtvusVw\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLlNFRmJlWEg0dEI4",
   "snippet": {
    "publishedAt": "2018-09-28T16:09:22.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "An Oscilloscope Bonus: 20+ Minutes of Poking Around a CD player",
    "description": "This video is a supplement to the latest \"real\" video from this channel.  There was a lot of interesting stuff here that got cut, so if this is the sort of thing you like--sit back and relax as you watch this loosely edited, not-at-all planned video.\n\nThis link will take you to the video that matters:\nhttps://youtu.be/eVTaU7mNnVY",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/SEFbeXH4tB8/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/SEFbeXH4tB8/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/SEFbeXH4tB8/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/SEFbeXH4tB8/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/SEFbeXH4tB8/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 42,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "SEFbeXH4tB8"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/70WOGWC-3R54tXCFeTQKytm0wnY\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLl9zYURDd3NCOVd3",
   "snippet": {
    "publishedAt": "2018-09-19T16:01:32.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "LED Printers: The Common Printing Tech You Haven't Heard Of",
    "description": "You can support this channel on Patreon!  Link below    \nIf you’re among the 85%* of people who don’t know what an LED printer is, then prepare to have your mind mildly blown as I tell you about the common printer tech that may in fact by lurking in your home or office, but which you’ve been mistakenly referring to as a laser printer.  *gasp*\n\n* This percentage was gathered via Twitter poll.  If anything, I’d say the general population is even less likely to know what an LED printer is, as my followers on Twitter would, I should think, be a little more interested in technology than the average individual.  Hey, did you know you can follow me on Twitter?  Here’s a link!  https://twitter.com/TechConnectify\n\nVarious links to stuff:\nI used a couple of animations from a website called “printermalls.com”.  It seems kind of like a time capsule these days, but apparently it’s run by a computer store in Myrtle Beach.  Maybe check them out?  Or don’t, it’s up to you.  \nhttps://www.printermalls.com/\n\nThe Engineer Guy has a good video on photocopiers.  Worth a watch, and if you’re somehow not subscribed to his channel, you should be!\nhttps://www.youtube.com/watch?v=rhDD0kgA8wA\nNow, strangely, this version isn’t on his channel, and I can’t find the original.  I don’t know if he removed it or what, but here’s a link to his actual channel:\nhttps://www.youtube.com/channel/UC2bkHVIDjXS7sgrgjFtzOXQ\n\n\nYou can support this channel on Patreon!  Through the generous support of people like you, this channel has gone from my weird hobby to my full-time job.  Thanks to the support of Patrons, I can run this channel without any outside sponsorship, which is how I’d like to keep it.  If you’re interested in supporting the channel as well, please check out my Patreon page at the link below.  Thank you for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nCharlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Thomas Fuchs, Callum Brieske, Tomas, Chuck Floyd, Eitan Tal, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, TeaChest Media, Michael Pacheco, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, Tianyu Ge, jeekl, rozboris, Kelly Rose, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, TM, Mark Nicholas Wales, T.J. Steckbeck, Pavlo Pravdiukov, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Matt Sackett, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Luke Biddle, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, Magnus Tranum, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/_saDCwsB9Ww/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/_saDCwsB9Ww/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/_saDCwsB9Ww/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/_saDCwsB9Ww/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/_saDCwsB9Ww/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 43,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "_saDCwsB9Ww"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/GLRBDUDVxzPubDhYfF4_sZnInS4\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLjN5SnFsRDlSeEQ0",
   "snippet": {
    "publishedAt": "2018-09-06T12:40:18.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Dissecting the CD Player: How to Turn Shiny Plastic into Music",
    "description": "You can support this channel on Patreon!   Link below     \nDid you ever want to know a little more about the nuts and bolts inside a CD player?  No?  Well I’m afraid you’ll have to pick another video because that’s exactly what this one is!  In it, I start with a taken-apart Magnavox CDB 260, and we examine what all the parts do, how they fit together, and how they work together to turn pits and lands on a plastic disc into your favorite electrosynthamagnetic musical sounds.\n\n\nThe Wiki article on CD Subcode:\nhttps://en.wikipedia.org/wiki/Compact_Disc_subcode\n\nThe previous video:\nhttps://youtu.be/sAbhPeTp51s\n\nThe Digital Sound Playlist:\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFWBEyCKt4tKHIk8ez_pZS_P\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nYou can support this channel on Patreon!  With the support of individuals like you, this channel has transformed from my weird hobby into my job.  It’s my goal to keep this channel completely independent from outside sponsorship, and thanks to Patreon supporters that’s more than possible!  If you’d like to pledge some support of your own to keep the channel free of outside influence, as well as to help it grow, please check out my Patreon page.  Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\n\nAnd thank you to the following Patrons!\nSen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph, Pavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Ulti, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, Alex Corn, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies, Ted Flores, Yota Ninja, Tee Jay, Jakob, Bee Jay (that’s a fun coincidence, a Tee Jay and a Bee Jay), Francesco Lezi, Countzero, Ray Chang, Kodapan, L0j1k, Chris Connett, Guillaume Tremblay-Beaumont, Eduardo Kaftanski, Winfield Trail, Miles H, Eric Nelson, Sha Nasti, Charles Surett, Ed Green, Stephen B. Hinton, Daniel Bernard, thegeoffreak, annoying and reprehensible idiot, Piotor Kowalski, Bob Slovick, Aleksei Besogonov, Michael Sims, Recycled, Meetupvideo, Jason Burgett, Wayne Marsh, Jib Systems, Lars Kuur, Alan Nise, Matt Dancer, Andrew Rosenwinkel, Fran Rogers, Malcolm Balshaw, Tero Janhunen, Bob B, Mike Noe, Alan Smith, Philip Cosgrove, Joshua Doades, Rob Rymarczyk, Scarfacecapwn, Andreas Lunderhage, Ennex The Fox, LEONARD PEZZANO, Steve Kralik, Nicolai Savolyi, Hank Eskin, Kirill Polstainen\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/3yJqlD9RxD4/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/3yJqlD9RxD4/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/3yJqlD9RxD4/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/3yJqlD9RxD4/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/3yJqlD9RxD4/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 44,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "3yJqlD9RxD4"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/1i7UYioePRKiCh5pW8jWwjPC2wM\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnNBYmhQZVRwNTFz",
   "snippet": {
    "publishedAt": "2018-08-26T13:33:26.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Compact Disc: An Introduction",
    "description": "You can support this channel on Patreon!  Link below.\nThe Compact Disc.  Just, like, radical man.  Lasers making the music?  What will the technology wizards think of next?\n\nIn this video we take a first look at the compact disc and its underlying encoding.  Soon we’ll be looking more into CD players and their laser pickup systems, so be sure to subscribe if you haven’t already!\n\nLinks!\n\nThe How It’s Made episode on CD’s.  Really good, but why they skipped the mastering step is beyond me!\nhttps://www.youtube.com/watch?v=ut_40U0t9pU\n\nThe Laserdisc Playlist:\nhttps://www.youtube.com/playlist?list=PLv0jwu7G_DFUoByWSHHoSTlUIxY7VkJLi\n\nThe really great source material on CIRC:\nhttps://books.google.com/books?id=yws55Rx1orEC&pg=PA41#v=onepage&q&f=false\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe Subreddit:\nhttps://www.reddit.com/r/technologyconnections/\n\n\nYou can support this channel on Patreon!  With the support of individuals like you, this channel has transformed from my weird hobby into my job.  It’s my goal to keep this channel completely independent from outside sponsorship, and thanks to Patreon supporters that’s more than possible!  If you’d like to pledge some support of your own to keep the channel free of outside influence, as well as to help it grow, please check out my Patreon page.  Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nHank Eskin, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Luke Biddle, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, Magnus Tranum, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin, Andres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Roger Beal, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Verysofisticated, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, Dane Peterson, Brent LaRowe, Aerospyke, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Daniel Ch, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Philip Daniel, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, MagicMatteo\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/sAbhPeTp51s/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/sAbhPeTp51s/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/sAbhPeTp51s/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/sAbhPeTp51s/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/sAbhPeTp51s/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 45,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "sAbhPeTp51s"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/4w-MUEgFZ39eEnClhmYnhKcX07U\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLklMQmpuWnEwbjhz",
   "snippet": {
    "publishedAt": "2018-08-17T13:01:35.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The GFCI/RCD: A Simple but Life-Saving Protector",
    "description": "You can support this channel on Patreon!  Link below   \nThese devices are a common sight in homes and businesses around the US and around the world.  But what are they for?  Why do we need them?  This video explores the life-saving potential of the GFCI (known alias: RCD) and explains how they work.\n\nDo you like videos like this?  Why not support the channel on Patreon!  Funny, that last sentence was a question, but it’s said like an exclamatory statement.  Odd, this English.  Anyway, Patrons of the channel have enabled me to make this my job, and it’s really neat!  I’d love to be able to make bigger and more elaborate videos, and with your help I can.  If you’re interested in supporting the channel with a voluntary pledge, please check out my Patreon page.  Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nCharlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Thomas Fuchs, Callum Brieske, Tomas, Chuck Floyd, Eitan Tal, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, TeaChest Media, Michael Pacheco, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, Tianyu Ge, jeekl, rozboris, Kelly Rose, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, TM, Mark Nicholas Wales, T.J. Steckbeck, Pavlo Pravdiukov, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Matt Sackett, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug\n\nDon’t see your name?  Don’t worry!  To keep this little perk alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/ILBjnZq0n8s/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/ILBjnZq0n8s/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/ILBjnZq0n8s/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/ILBjnZq0n8s/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/ILBjnZq0n8s/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 46,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "ILBjnZq0n8s"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/eFdDKhhe0QQpK9l9_JTF55XLrZ4\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLnBXamRXQ2VQZ3ZB",
   "snippet": {
    "publishedAt": "2018-08-10T15:16:41.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Nyquist-Shannon; The Backbone of Digital Sound",
    "description": "You can support this channel on Patreon!  Link below        \nLet’s talk a bit more about digital sound.  Thanks to a mathematical theorem, we know that a bandlimited signal can perfectly be represented by a series of discrete samples that occur at twice the rate of the frequency of the bandlimit.  OK, that’s hard to explain in a little descroption blurb, so the video is probably your best bet.\n\nThis here is the video of Monty’s.  YOU SHOULD TOTALLY WATCH IT!!  There is so much good stuff in here and it’s a great resource for dispelling some of the myths of Digital Sound.\nhttps://www.youtube.com/watch?v=cIQ9IXSUzuM\n\nThis is his original article that inspired the video (I think--it’s a great article anyway):\nhttps://xiph.org/~xiphmont/demo/neil-young.html\n\n\n\nYou can support this channel on Patreon!  Patrons of the channel are what keep these videos coming, and with the support of viewers like you, I’m making improvements to the channel.  If you’d like to pledge some support and help the channel grow, please check out my Patreon page.  Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nAnd thank you to the following Patrons!\nSen, mark barratt, Tully, Violet Moon, Duncan Ward, Tobias Faller, Justin Smith, Corey A Hudson, EpicLPer, Luc Ritchie, Michael Dragone, Manfred Farris, Eric Romero, John Laur, Patric Bates, Sven Almgren, Lutz Broska, Jürgen Kieser, Luke O’Dell, Nicholas, Ewen McNeill, thefanification, Nicolas, Albin Flyckt, Michael A Kalfas II, Michael Bernstein, Kevin Kostka, Shame Zamora, Brad Wilmot, John Bailey, Alex Ilyin, Miles H, Deovandski Skibinski Junior, Andrew \"FastLizard4\" Adams, Avi Drissman, Jens Bretschneider, Phil Taprogge, Sam, Rich Jeanes, Jonathan Skowronek, Tim Grov, Pieter van der Eems, Philip Kvist, Brian Condron, Peter Jerde, Torin Zaugg, James Watson, Vince Terranova, Jason Nevins, Andrew Montagne, David Scott, Mike Nichols, MrSonicOSG, Brandon Enright, James Fialho, Christian Torelli, Sunchild, Kim Rypstra, The Paul Allen, toasterking, Seth Robinson, Ralph, Pavel Soukharev, Forrest Miller, Patrick Quinn-Graham, Max Zelinski, Troy Kelly, Ulti, Jason Brandy, Norman Tatlock, Jesper Jansen, Andrew Johnson, Goolashe, Rémy GRANDIN, ce keen, Jake Shep83, Nick Pollard, Drew Holm, David Grossman, Ben Auch, Jeff Puglisi, Andy S, Robert, Johan Greefkes, Jacob Dixon, Matt Luebbert, Alex Corn, SonOfSofaman, Brent Higgins, Rob Kefford, Roger Baker, Alexander Schrøder, Andreas Skagestad, Eric Butterfield, James Holmes, Tim Skloss, James-Ross Harrison, Sean OCallaghan, Lee Wallbank, Jonas, Colin Cogle, Kyle Matheis, Krzysztof Klimonda, Aaron Rennow, Gantradies\n\nDon’t see your name?  Don’t worry!  To keep this little shout-out alive, the $5 patron shoutout is now on a rotating basis!  If you’re not here, you should be here in one of the next two videos.  If you’ve slipped through the cracks, don’t hesitate to send me a message via Patreon and I’ll fix it!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/pWjdWCePgvA/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/pWjdWCePgvA/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/pWjdWCePgvA/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/pWjdWCePgvA/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/pWjdWCePgvA/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 47,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "pWjdWCePgvA"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/H5iapFouiX9Ufm5rMU1nr0DyQZ8\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLkdkX21oQmZfRkpB",
   "snippet": {
    "publishedAt": "2018-07-25T20:30:06.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "Sound By Numbers: The Rise of Digital Sound",
    "description": "You can support this channel on Patreon!  Link below     \nThese days, listening to music on the analog formats of old has seen a massive resurgence.  Whether it’s cassettes or vinyl, it seems analog is in and mp3’s are out.  But digital sound is pretty freaking neat!  This video discusses how it works and is the launching point for this, the final videos on sound reproduction.\n\nYou can support this channel on Patreon!  Patrons of the channel are what keep these videos coming.  With the support of people like you, this channel has become my full-time work, and I’ve been able to purchase new equipment and spend more time learning video-making skills.  If you’d like to join in and support the channel as well, please take a look at my Patreon page.  Thanks for your consideration!\nhttps://www.patreon.com/technologyconnections\n\nTechnology Connections on Twitter:\nhttps://twitter.com/TechConnectify\n\nThe subreddit (warning: I’ve no clue what I’m doing here, but we’ll learn together)\nhttps://www.reddit.com/r/technologyconnections/\n\n\nThank you to the following Patrons!\nHank Eskin, Brady Brown, Giacomo Scaparrotti, Winfield Trail, Luke Biddle, Marc Ethier, Joseph Hill, John Semander, Bill Basch, Robert Toth, Magnus Tranum, blouerat, PK, Richard Lindsey, Lars JJ, Patrick Musson, Matt Taylor, Johan Schoeman, Thomas Jew, Josef Citrine, Marcus Schwartz, Ryan Cozzubbo, Christopher Bassett, Julian Rapoport, Ed Hall, Jason Portwood, Jesse Cardone, Michael Snowden, Drew McClain, Boh00711, Jon-André Haraldstad, The8TrackKid, Daniel J Schless, Sebi Jecklin, Casey Kikendall, Craig Leverenz, Charlie Hankin, Andres Plaza, Revenge, Matthew Baron, André, Gerald Monaco, Tab Patterson, Jason Weathered, h.drew foy, Roger Beal, Gantradies, Chris Hartl, Steve Stone, Brian G. Shacklett, Colton Aubrey Hooke, Paul Mills, Christopher Luna, Kotanu, Brendan Terrett, Techmoan, Mike Mason, Elijah Reeds, Christopher Jett, Justin Talbot, Steven Metcalf, Verysofisticated, Lolucoca, John McLusky, Ashleigh R, Stephen Bell, Logan Beenken, Eric Wood, Stephen Pick, BlancoGrande, Matthew Giraitis, James Ryan, Robert Joscelyne, Francis Fisher, Kedar Deshpande, Lukas Komischke, Dave Anderson, Felix Freiberger, Dane Peterson, Brent LaRowe, Aerospyke, Kieran Cox, Hunter Schwisow, Logan Kriete, Rafał Wiosna, Adam D. Ruppe, Audin Malmin, Eric Hansen, Noah McCann, Jason R Scheuren, Rufo Sanchez, The War Academy, Yaniv, neko, Daniel Ch, Lee Wallbank, Grayson Lang, Neil Bronner, Carl Yazbek, Jeffrey Grajkowski, Christopher Splinter, Eric Merrill, Stefan Berndtsson, Michael Sims, Seth Kneller, Clint Eisinger, Jesse G. Donat, Christopher Leidich, Mike Friedman, Svante, André Waage Sørensen, Ed McCloskey, Philip Daniel, Jasper Thun, Camilo Rodrigues, Dusan Dzelebdzic, Sam Douglas, Sam Redfern, MagicMatteo\nDon’t see your name?  Don’t worry!  Due to the sheer volume of you fine folks, the $5 patron description shoutout has gone on a rotating basis!  Rather than eliminate this perk, we’ll just take turns.  Right now, you should appear at least every third video.  So if you didn’t see yourself the last two times, don’t worry--you’re up next!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/Gd_mhBf_FJA/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/Gd_mhBf_FJA/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/Gd_mhBf_FJA/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/Gd_mhBf_FJA/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/Gd_mhBf_FJA/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 48,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "Gd_mhBf_FJA"
    }
   }
  },
  {
   "kind": "youtube#playlistItem",
   "etag": "\"SJZWTG6xR0eGuCOh2bX6w3s4F94/0baUFRf6FOBEaidlef-zcjgaq_4\"",
   "id": "VVV5MHRLTDFUN3dGb1ljeENlMHhqTjZRLk8xbFo5bjJieFdB",
   "snippet": {
    "publishedAt": "2018-07-14T16:00:31.000Z",
    "channelId": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "title": "The Senseless Ambiguity of North American Turn Signals",
    "description": "There are studies linked below that demonstrate a tangible safety benefit of amber turn signals.  You might want to check them out.  Though it might be small, the benefit is demonstrably there.\nThis has always bugged me, and no one talks about it.  Our automotive lighting regulations in North America are stupid when it comes to tail lights.  This video is about what is stupid, why it’s stupid, and what we could do about it.\n\nHere are some studies showing that amber turn signals are indeed safer:\n\nThe following NHTSA study found between a 3 and 28% decrease in liklihood of collision with amber turn signals, although it acknowledges that some of this may have been related to simply having a separate indicator for braking and turning and not explicitly the color;\nhttps://www.nhtsa.gov/sites/nhtsa.dot.gov/files/documents/811_037.pdf\n\nThis study showed a significant descrease in reaction time to a brake signal when the vehicle is fitted with amber turn signals--partially explained by “Specifically, the subjects knew whether the red or the yellow turn signals were to be expected”.  This suggests that the design should make clear even when the lights aren’t lit that there is a separate indicator for a turn signal.\nhttps://deepblue.lib.umich.edu/bitstream/handle/2027.42/64041/86955.pdf;sequence=1\n\nAnd wouldn’t ya know it, the IIHS has done some research.  It’s a shame they aren’t making a bigger fuss about this:\nhttp://www.iihs.org/iihs/sr/statusreport/article/44/8/3\n\n\n\nYou can support this channel on Patreon!  Patrons of the channel are what keep these videos coming.  With the support of people like you, I’m able to make these videos full-time.  If you’re interested in joining the amazing people that support the channel, please check out my Patreon page.  Thanks for your consideration!\n\nAnd thank you to the following Patrons!\nCharlie Quigley, Dakota Williams, Adam Erickson, Kevin Terrell, Tommi Hares, Trevor Smith, Thomas Fuchs, Callum Brieske, Tomas, Chuck Floyd, Eitan Tal, Emil Gilliam, Andy Copsey, Bitcore, Filip, Per 'Zapro' Jensen, Ward Sutherland, Örn Arnarson, Alberto Amatucci, etho624, Chris Giddings, Tomasz Kolinko, Carles Codony, Samuel Plainfield, Jason McMillon, TeaChest Media, Michael Pacheco, Jason Ganiatsas, Mike Gerow, Marc Schroth, Andrew J Thom, Samuel Blakey, Mrpirate707, Frank Harris, Joseph Spiros, Patrick Meister, Sergey Kiselev, Clara Latter, Ashley Grant, Scott Emmett O'Donnell, Tianyu Ge, jeekl, rozboris, Kelly Rose, Paul Fisher, Stephen Vrazel, Applied Science, Peter ford, Sophie Haskins, James Id, Brendan Sheehy, Jay Foreman, Rich Theobald, Kyle Olson, Bryan Reid, Quinton Wilson, Jeremy DeGuzman, Sean Spark, Lucas Hartbarger, Taylor Cuzela, David Lastres, Granger Meador, Jeremy Kitchen, Jason Wellband, Shane Belaire, Paul Emmerich, Matthew Rossi, Paul Craigie, Alex Smith, Nick, Tyler, Paul Williams, Steven Hidy, Fredrik Grufman, Kollin O'Dannel, RJ Kent, Yona, Kevin Strehl, Tony DeSimone, Mike Bailey, Maggie Brown, Howard Kraut, TM, Mark Nicholas Wales, Jason D., T.J. Steckbeck, Pavlo Pravdiukov, Tobias Faller, Marco Anastasi, Peter Byrd, Trix Farrar, Matthew Razza, Mitchel J. Mullin II, Jakob Strande Langgaard, Jan Staval, Paul Walton, Matt Falcon, Steven First, Denver Alexander, Conor Hennessy Sykes, FinaleGrande, Christopher Dickey, OnlyOneSolutionTBHFam, Matt Sackett, Tim Juchcinski, Wayne Marsh, Ernie Smith, foophoof, Stein Strindhaug\n\nAnd hey there, Patrons!  You might have noticed that the list has ended prematurely.  Starting from this video, I will have to do this on a rolling-basis because there are SO MANY OF YOU AMAZING PEOPLE!  I like to put your names here because each and every one of you is awesome, but I keep getting descriptions that are too long!  Rather than just give up, I’ll simply split the list up and make sure each one of you gets your time to shine, if less often.  Thank you!",
    "thumbnails": {
     "default": {
      "url": "https://i.ytimg.com/vi/O1lZ9n2bxWA/default.jpg",
      "width": 120,
      "height": 90
     },
     "medium": {
      "url": "https://i.ytimg.com/vi/O1lZ9n2bxWA/mqdefault.jpg",
      "width": 320,
      "height": 180
     },
     "high": {
      "url": "https://i.ytimg.com/vi/O1lZ9n2bxWA/hqdefault.jpg",
      "width": 480,
      "height": 360
     },
     "standard": {
      "url": "https://i.ytimg.com/vi/O1lZ9n2bxWA/sddefault.jpg",
      "width": 640,
      "height": 480
     },
     "maxres": {
      "url": "https://i.ytimg.com/vi/O1lZ9n2bxWA/maxresdefault.jpg",
      "width": 1280,
      "height": 720
     }
    },
    "channelTitle": "Technology Connections",
    "playlistId": "UUy0tKL1T7wFoYcxCe0xjN6Q",
    "position": 49,
    "resourceId": {
     "kind": "youtube#video",
     "videoId": "O1lZ9n2bxWA"
    }
   }
  }
 ]
}

    http_version: null
  recorded_at: Sun, 15 Mar 2020 05:44:04 GMT
recorded_with: VCR 5.1.0
